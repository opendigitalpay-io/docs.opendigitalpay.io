{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Walkthrough.md?vue&type=template&id=07de6ab2&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Walkthrough.md","mtime":1617331587413},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJidGNwYXktc2VydmVyLXdhbGt0aHJvdWdoIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNidGNwYXktc2VydmVyLXdhbGt0aHJvdWdoIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQlRDUGF5IFNlcnZlciBXYWxrdGhyb3VnaCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiB0aGlzIGFydGljbGUsIHdlIHdpbGwgd2FsayB5b3UgdGhyb3VnaCB0aGUgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkJUQ1BheSB1c2VyIGludGVyZmFjZSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIHNob3cgeW91IGhvdyB0byBuYXZpZ2F0ZSB0aHJvdWdoIGRpZmZlcmVudCBvcHRpb25zLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJXYXRjaCB2aWRlbyBiZWxvdyBmb3IgYW4gaW50ZXJhY3RpdmUgb3ZlcnZpZXcgb2YgdGhlIGZlYXR1cmVzLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAieXRFbWJlZCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgInVybChodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9aSWZKeXE5UmltTS9ocWRlZmF1bHQuanBnKSIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aSWZKeXE5UmltTSIsCiAgICAgICAgICAgICJkYXRhLWlkIjogIlpJZkp5cTlSaW1NIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUiLAogICAgICAgICAgICAgICJkYXRhLXNyYyI6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvWklmSnlxOVJpbU0/JmF1dG9wbGF5PTEmYXV0b2hpZGU9MSZtb2Rlc3RicmFuZGluZz0xJmNvbG9yPXdoaXRlJnJlbD0wIiwKICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgICAgIGFsbG93OiAiYXV0b3BsYXk7ZW5jcnlwdGVkLW1lZGlhO3BpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBZnRlciB5b3UgY3JlYXRlZCB0aGUgYWNjb3VudCBvbiB0aGUgQlRDUGF5IFNlcnZlciBpbnN0YW5jZSBob3N0ZWQgYnkgeW91cnNlbGYgb3IgYSB0aGlyZC1wYXJ0eSwgeW91J2xsIHNlZSBhIHZhcmlldHkgb2Ygb3B0aW9ucyBpbiB0aGUgbmF2aWdhdGlvbiBtZW51IG9uIHRvcC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQlRDUGF5LU5hdmlnYXRpb24uanBnIiksCiAgICAgICAgICAgIGFsdDogIkJUQ1BheSBTZXJ2ZXIgTmF2aWdhdGlvbiIsCiAgICAgICAgICAgIHRpdGxlOiAiQlRDUGF5IFNlcnZlciBOYXZpZ2F0aW9uIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNlcnZlciBzZXR0aW5ncyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU3RvcmVzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBcHBzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJXYWxsZXRzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJJbnZvaWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUGF5bWVudCByZXF1ZXN0cyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiTXkgc2V0dGluZ3MiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk5vdGlmaWNhdGlvbnMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInNlcnZlci1zZXR0aW5ncyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc2VydmVyLXNldHRpbmdzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTZXJ2ZXIgc2V0dGluZ3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU2VydmVyIHNldHRpbmdzIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBpcyBzb21ldGhpbmcgb25seSBhIHNlcnZlciBhZG1pbiBjYW4gYWNjZXNzLiBJZiB5b3UncmUgdXNpbmcgc29tZW9uZSBlbHNlJ3Mgc2VydmVyLCB5b3Ugd29uJ3Qgc2VlIFNlcnZlciBTZXR0aW5ncy4gSW5zaWRlIHRoZSBzZXR0aW5ncywgeW91IGNhbiBwZXJmb3JtIHRhc2tzIHN1Y2ggYXMgY29udHJvbGxpbmcgdXNlcnMsIHJhdGVzLCB1cGRhdGluZyB0aGUgc2VydmVyLCBldGMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBjaGVjayAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJTZXJ2ZXIgU2V0dGluZ3MgRkFRIikKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJVc2VycyAtIEFkZCwgcmVtb3ZlIG9yIG1hbmFnZSB1c2VycyBvZiB5b3VyIEJUQ1BheSBTZXJ2ZXIuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFbWFpbCBzZXJ2ZXIgLSBJZiB5b3Ugd2FudCB1c2VycyB0byB2ZXJpZnkgZS1tYWlsIGFkZHJlc3Mgd2hlbiByZWdpc3RlcmluZyBzZXQgdXAgdGhlIFNNVFAgc2V0dGluZ3MuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBvbGljaWVzIC0gRW5hYmxlIG9yIGRpc2FibGUgdXNlciByZWdpc3RyYXRpb24sIGUtbWFpbCB2ZXJpZmljYXRpb24sIHNlYXJjaCBlbmdpbmUgaW5kZXhpbmcsIGRpc3BsYXkgYXBwcyBvbiB3ZWJzaXRlIHJvb3QuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlcnZpY2VzIC0gZ1JQQywgUkVTVCBhbmQgUlRMIHVzZWQgZm9yIGNvbm5lY3RpbmcgeW91ciBMTiBub2RlLCBTU0gga2V5cyBhbmQgdXBsb2FkZWQgZmlsZSBzdG9yYWdlIHNldHVwLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGVtZSAtIEN1c3RvbWl6ZSB0aGUgZnJvbnQtZW5kIGFwcGVhcmFuY2Ugb2YgeW91ciBCVENQYXkgU2VydmVyLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJNYWludGVuYW5jZSAtIFVwZGF0ZSB5b3VyIEJUQ1BheSB0byBsYXRlc3QgdmVyc2lvbiBhbmQgY2xlYW4geW91ciBCVENQYXkgYnkgZGVsZXRpbmcgdW51c2VkIGRvY2tlciBpbWFnZXMuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTG9ncyAtIERpc3BsYXlzIG1vc3QgcmVjZW50IGxvZ3Mgb2YgdGhlIEJUQ1BheSBTZXJ2ZXIuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaWxlcyAtIEFmdGVyIGVuYWJsaW5nIHRoaXMgZmVhdHVyZSBpbiBTZXJ2aWNlcywgdXBsb2FkIGV4dGVybmFsIGZpbGVzIGFuZCBhY2Nlc3MgdGhlbSB2aWEgdXJsLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzdG9yZXMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3N0b3JlcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN0b3JlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiSW5zaWRlIEJUQ1BheSB5b3UgY2FuICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJjcmVhdGUgYW5kIG1hbmFnZSBhbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIHN0b3JlcyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gRWFjaCBzdG9yZSBoYXMgaXRzIG93biB3YWxsZXQsIGNhbiBjcmVhdGUgYXBwcyAoUG9pbnQgb2YgU2FsZSBvciBQYXltZW50IEJ1dHRvbnMgYW5kIENyb3dkZnVuZHMpIG9yIGJlIHBhaXJlZCB3aXRoIGV4dGVybmFsIGUtY29tbWVyY2Ugc29mdHdhcmUgdGhyb3VnaCBvbmUgb2YgdGhlIGludGVncmF0aW9ucyBhdmFpbGFibGUuIEFkbWluIGRvZXMgbm90IGhhdmUgY29udHJvbCBvdmVyIHRoZSBwcml2YXRlIGtleXMgb2YgdGhlIG90aGVyIHVzZXIncyBzdG9yZXMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBjaGVjayAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0ZBUS9GQVEtU3RvcmVzLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiU3RvcmVzIEZBUSIpCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkdlbmVyYWwgc2V0dGluZ3MgLSBDb25maWd1cmUgaW5kaXZpZHVhbCBzdG9yZSBzZXR0aW5ncywgc2V0IHVwIGRlcml2YXRpb24gc2NoZW1lIGZvciB5b3VyIHdhbGxldCBhbmQgYWRqdXN0IHRoZSBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvciBpbnZvaWNlIGV4cGlyYXRpb24gdGltZSwgZXRjLiBTZXJ2ZXIgYWRtaW5zIGNhbiBlbmFibGUgTGlnaHRuaW5nIE5ldHdvcmsgcGF5bWVudHMuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJSYXRlcyAtIFNldCB0aGUgc291cmNlIGZvciBjcnlwdG9jdXJyZW5jeSB0byBmaWF0ICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLVN0b3Jlcy8jaG93LXRvLWNoYW5nZS10aGUtZXhjaGFuZ2UtcmF0ZS1wcm92aWRlci1mb3ItaW52b2ljZXMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJleGNoYW5nZSByYXRlcyBmb3IgeW91ciBzdG9yZSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJDaGVja291dCBleHBlcmllbmNlIC0gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8tbW9kaWZ5LXRoZS1jaGVja291dC1wYWdlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQ3VzdG9taXplIHRoZSBhcHBlYXJhbmNlIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIG9mIHRoZSBjaGVja291dCBwYWdlLCBjaG9vc2UgZGVmYXVsdCBjb2luLCBldGMuIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiQWNjZXNzIFRva2VucyAtIFRva2VucyBmb3IgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAiL1doYXRzTmV4dC8jY29ubmVjdGluZy15b3VyLWJ0Y3BheS1zdG9yZS10by15b3VyLWUtY29tbWVyY2UtcGxhdGZvcm0iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJwYWlyaW5nIHRoZSBzdG9yZSB0byBhbiBpbnRlZ3JhdGlvbiIpXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVXNlcnMgLSBFbmFibGUgb3RoZXIgdXNlcnMgd2l0aCBhIHJlZ2lzdGVyZWQgQlRDUGF5IGFjY291bnQgdG8gYWNjZXNzIHlvdXIgc3RvcmUgYXMgZWl0aGVyIGd1ZXN0IG9yIG93bmVyLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiUGF5IEJ1dHRvbiAtICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9XaGF0c05leHQvI2NyZWF0aW5nLXRoZS1wYXktYnV0dG9uIiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiQ3JlYXRlIGEgcGF5bWVudCBidXR0b24iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgeW91IGNhbiBlYXNpbHkgZW1iZWQgaW50byB5b3VyIHdlYnNpdGUuIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhcHBzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhcHBzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQXBwcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiRWFjaCBzdG9yZSBoYXMgYWNjZXNzIHRvIGRpZmZlcmVudCBhcHBzLiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBcHBsaWNhdGlvbnMgYnVpbHQgb24gdG9wIG9mIEJUQ1BheSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBleHRlbmQgdGhlICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1VzZUNhc2UvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJ1c2UgY2FzZSIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBvZiB0aGUgc29mdHdhcmUgYW5kIGNhdGVyIHRvIGRpZmZlcmVudCB0eXBlIG9mIHVzZXJzLiBIZXJlIHlvdSBjYW4gY3JlYXRlIGEgbmV3IGFwcCBhbmQgY29ubmVjdCBpdCB0byB0aGUgc3RvcmUgYW5kIGN1c3RvbWl6ZSBpdC4gQSBnb29kIGV4YW1wbGUgaXMgdGhlIFBvaW50IG9mIFNhbGUgYXBwIHdoaWNoIHlvdSBjYW4gdXNlIHRvIHJlY2VpdmUgcGF5bWVudHMgaW4gcGh5c2ljYWwgc3RvcmVzIG9yIGV2ZW4gZG9uYXRpb25zLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkZvciBtb3JlIGluZm9ybWF0aW9uLCBjaGVjayAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9BcHBzLyIgfSB9LCBbX3ZtLl92KCJBcHBzIildKSwKICAgICAgICAgIF92bS5fdigiIG9yICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0ZBUS9GQVEtQXBwcy8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIkFwcHMgRkFRIikKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAid2FsbGV0cyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjd2FsbGV0cyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFdhbGxldHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFYWNoIHN0b3JlIGdldHMgYW4gaW50ZXJuYWwgd2FsbGV0IHVwb24gYWRkaW5nIGEgZGVyaXZhdGlvbiBzY2hlbWUuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW50ZXJuYWwgQlRDUGF5IHdhbGxldCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgc2hvd3MgYWxsIG9mIHlvdXIgcGF5bWVudHMgYW5kIHNob3VsZCBiZSB1c2VkIGFzIGEgcmVmZXJlbmNlIGlmIHNvbWUgcGF5bWVudHMgYXJlIG5vdCBzaG93biBpbiB5b3VyIHNvZnR3YXJlIG9yIGhhcmR3YXJlIHdhbGxldCBkdWUgdG8gc29tZSB3YWxsZXRzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtV2FsbGV0LyNtaXNzaW5nLXBheW1lbnRzLWluLW15LXNvZnR3YXJlLW9yLWhhcmR3YXJlLXdhbGxldCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIm5vdCBzdXBwb3J0aW5nIGxhcmdlciBnYXAgbGltaXQiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIEluIFdhbGxldHMsIHlvdSBjYW4gc2VlIHRoZSB0b3RhbCBiYWxhbmNlIG9mIHlvdXIgc3RvcmUuIFRoZSBmdW5kcyBmcm9tIHRoZSB3YWxsZXQgY2FuIG9ubHkgYmUgc3BlbnQsIGlmIHRoZSB1c2VyIHNpZ25zIGEgdHJhbnNhY3Rpb24gd2l0aCBhIGNvbXBhdGlibGUgaGFyZHdhcmUgd2FsbGV0LiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhyZWUgZWxlbWVudHMgb2YgdGhlIGludGVybmFsIEJUQ1BheSBXYWxsZXQgYXJlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUcmFuc2FjdGlvbiAtIFNob3dzIHlvdXIgZW50aXJlIHRyYW5zYWN0aW9uIGhpc3RvcnkuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTZW5kIC0gVXNlZCBmb3Igc2VuZGluZyBmdW5kcyBvdXQgb2YgeW91ciB3YWxsZXQgKGhhcyB0byBiZSBzaWduZWQgYW5kIGNvbmZpcm1lZCBvbiBhIGNvbXBhdGlibGUgaGFyZHdhcmUgd2FsbGV0KS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZWNlaXZlIC0gVXNlZCB0byBtYW51YWxseSBnZW5lcmF0ZSBhIG5ldyBhZGRyZXNzLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVzY2FuIC0gRW5hYmxlcyB5b3UgdG8gaW1wb3J0IG9sZCB3YWxsZXRzIGludG8gQlRDUGF5IG1vcmUgZWFzaWx5IGFuZCBzb2x2ZXMgdGhlIGdhcCBsaW1pdCBpc3N1ZSBtb3N0IGV4dGVybmFsIHdhbGxldHMgaGF2ZS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlB1bGwgUGF5bWVudHMgLSBVc2VkIHRvIGNyZWF0ZSBhbmQgbWFuYWdlIFB1bGwgUGF5bWVudHMuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgZmVhdHVyZSwgY2hlY2sgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvUHVsbFBheW1lbnRzLyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJQdWxsIFBheW1lbnRzIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUGF5b3V0cyAtIFVzZWQgdG8gbWFuYWdlIFB1bGwgUGF5bWVudCByZXF1ZXN0cy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBTQlQgLSBVc2VkIHRvIHNpZ24gbXVsdGktc2lnbmF0dXJlIHRyYW5zYWN0aW9ucyB0aHJvdWdoIHRoZSBQU0JUIHN0YW5kYXJkLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTZXR0aW5ncyAtIFVzZWQgdG8gdmlldyBhbmQgYWRqdXN0IGFkZGl0aW9uYWwgc2V0dGluZ3MgZm9yIHlvdXIgd2FsbGV0LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkZvciBtb3JlIGluZm9ybWF0aW9uLCBjaGVjayAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9XYWxsZXQvIiB9IH0sIFtfdm0uX3YoIldhbGxldCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9GQVEvRkFRLVdhbGxldC8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIldhbGxldCBGQVEiKQogICAgICAgICAgXSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJpbnZvaWNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaW52b2ljZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEludm9pY2VzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFsbCBvZiB0aGUgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImludm9pY2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZvciB5b3VyIHVzZXIgYWNjb3VudCB3aWxsIGJlIGRpc3BsYXllZCBoZXJlLiBZb3UgY2FuIGZpbHRlciB0aGUgaW52b2ljZXMgYnkgdGhlIHN0YXR1cywgb3JkZXIsIGl0ZW0sIHN0b3JlIG9yIGRhdGUuIFlvdSBjYW4gYWxzbyBjcmVhdGUgaW52b2ljZXMgbWFudWFsbHkuIEludm9pY2VzIGFyZSBzb3J0ZWQgYnkgZGF0ZSBmcm9tIG5ldyB0byBvbGQuIFlvdSBjYW4gb3BlbiBhbiBpbmRpdmlkdWFsIGludm9pY2UgZm9yIG1vcmUgaW5mb3JtYXRpb24uIFVzZSB0aGUgZXhwb3J0IGJ1dHRvbiB0byBzYXZlIGEgZmlsZSAoLmpzb24gb3IgLmNzdikgZGV0YWlsaW5nIGFsbCBpbnZvaWNlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwYXltZW50LXJlcXVlc3RzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXltZW50LXJlcXVlc3RzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUGF5bWVudCBSZXF1ZXN0cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJFYWNoIHN0b3JlIGNhbiBoYXZlIGFuIHVubGltaXRlZCBudW1iZXIgb2YgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInBheW1lbnQgcmVxdWVzdHMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2hpY2ggYXJlIGRpc3BsYXllZCBoZXJlLiBQYXltZW50IHJlcXVlc3RzIGFyZSBkeW5hbWljIGludm9pY2VzIHRoYXQgY2FuIGJlIHNoYXJlZCBieSB1cmwgYW5kIHBhaWQgYXQgYW55IHRpbWUgdXNpbmcgY3VycmVudCBCVEMgZXhjaGFuZ2UgcmF0ZXMuIEhlcmUgeW91IGNhbiBlZGl0IGFuZCB2aWV3IHlvdXIgcGF5bWVudCByZXF1ZXN0cy4gWW91IGNhbiBzZWUgaW52b2ljZSBkZXRhaWxzIGZvciB5b3VyIHBheW1lbnQgcmVxdWVzdHMgYW5kIGV2ZW4gY2xvbmUgcHJldmlvdXNseSBjcmVhdGVkIHBheW1lbnQgcmVxdWVzdHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJGb3IgbW9yZSBpbmZvcm1hdGlvbiwgY2hlY2sgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvUGF5bWVudFJlcXVlc3RzLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUGF5bWVudCBSZXF1ZXN0cyIpCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm15LXNldHRpbmdzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNteS1zZXR0aW5ncyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTXkgU2V0dGluZ3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiTXkgU2V0dGluZ3MgYXJlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJ1c2VyIHNldHRpbmdzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBNb2RpZnkgeW91ciBlLW1haWwgYWRkcmVzcywgcGFzc3dvcmQgb3Igc2V0IHVwIHR3by1mYWN0b3IgYXV0aGVudGljYXRpb24uIFRoZSBVMkYgZmVhdHVyZSBhbGxvd3MgdXNlcnMgdG8gZnVydGhlciBlbmhhbmNlIHRoZSBzZWN1cml0eSBvZiB0aGVpciBhY2NvdW50cyBieSBwaHlzaWNhbGx5IGNvbmZpcm1pbmcgYXV0aGVudGljYXRpb24gd2l0aCBhIFUyRiBjb21wYXRpYmxlIGRldmljZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJub3RpZmljYXRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNub3RpZmljYXRpb25zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOb3RpZmljYXRpb25zIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5vdGlmaWNhdGlvbnMgaW5mb3JtIHRoZSB1c2VyIHRoYXQgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiYW4gZXZlbnQgaGFzIG9jY3VycmVkIG9uIHRoZSBCVENQYXkgU2VydmVyIGluc3RhbmNlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLlxuVGhlIGV2ZW50IHRoYXQgaXMgbm90aWZpZWQgY2FuIGZvciBleGFtcGxlIGJlIGEgcmVjZWl2ZWQgb3IgZmFpbGVkIHBheW1lbnQsIGFuIG92ZXJwYWlkIG9yIHVuZGVycGFpZCBpbnZvaWNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkJ5IGNsaWNraW5nIG9uIHRoZSBpY29uIHlvdSBjYW4gYWNjZXNzIHRoZSBOb3RpZmljYXRpb25zIHBhZ2UsIHdoZXJlIHlvdSBjYW4gdmlldyBwYXN0IE5vdGlmaWNhdGlvbnMgYW5kIG9wdGlvbmFsbHkgZGVsZXRlIHRoZW0uXG5MZWFybiBtb3JlIGFib3V0IGFsbCBCVENQYXkgbm90aWZpY2F0aW9ucyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL05vdGlmaWNhdGlvbnMvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJoZXJlIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}