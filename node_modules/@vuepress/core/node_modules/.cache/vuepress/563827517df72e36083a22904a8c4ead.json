{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/PrestaShop.md?vue&type=template&id=315039b4&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/PrestaShop.md","mtime":1617331587408},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJwcmVzdGFzaG9wLWludGVncmF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcmVzdGFzaG9wLWludGVncmF0aW9uIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJlc3Rhc2hvcCBpbnRlZ3JhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGRvY3VtZW50IGV4cGxhaW5zIGhvdyB0byAiKSwKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJpbnRlZ3JhdGUgQlRDUGF5IFNlcnZlciBpbnRvIHlvdXIgUHJlc3RhU2hvcCBzdG9yZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIuXG5JZiB5b3UgZG8gbm90IGhhdmUgYSBzdG9yZSB5ZXQsIGZvbGxvdyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vYmxvZy50ZW1wbGF0ZXRvYXN0ZXIuY29tL2hvdy10by1pbnN0YWxsLXByZXN0YXNob3AvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJ0aGlzIHN0ZXAgYnkgc3RlcCBhcnRpY2xlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB0byBjcmVhdGUgb25lIGZyb20gc2NyYXRjaC4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBpbnRlZ3JhdGUgQlRDUGF5IFNlcnZlciBpbnRvIGFuIGV4aXN0aW5nIFByZXN0YVNob3Agc3RvcmUsIGZvbGxvdyB0aGUgc3RlcHMgYmVsb3cuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiMC1zZXJ2ZXItcmVxdWlyZW1lbnRzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMwLXNlcnZlci1yZXF1aXJlbWVudHMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAwLiBTZXJ2ZXIgUmVxdWlyZW1lbnRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGxlYXNlIGVuc3VyZSB0aGF0IHlvdSBtZWV0IHRoZSBmb2xsb3dpbmcgcmVxdWlyZW1lbnRzIGJlZm9yZSBpbnN0YWxsaW5nIHRoaXMgcGx1Z2luLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIllvdSBhcmUgdXNpbmcgUEhQIDcuMyBvciBoaWdoZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIllvdXIgUHJlc3RhU2hvcCBpcyB2ZXJzaW9uIDEuNy43LjAgb3IgaGlnaGVyLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIGN1cmwsIGdkLCBpbnRsLCBqc29uLCBhbmQgbWJzdHJpbmcgUEhQIGV4dGVuc2lvbnMgYXJlIGF2YWlsYWJsZSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiWW91IGhhdmUgYSBCVENQYXkgU2VydmVyLCBlaXRoZXIgIiksCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9EZXBsb3ltZW50LyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzZWxmLWhvc3RlZCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1RoaXJkUGFydHlIb3N0aW5nLyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJob3N0ZWQgYnkgYSB0aGlyZC1wYXJ0eSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvUmVnaXN0ZXJBY2NvdW50LyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJZb3UndmUgYSByZWdpc3RlcmVkIGFjY291bnQgb24gdGhlIGluc3RhbmNlIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9DcmVhdGVTdG9yZS8iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiWW91J3ZlIGEgQlRDUGF5IHN0b3JlIG9uIHRoZSBpbnN0YW5jZSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvV2FsbGV0U2V0dXAvIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIllvdSd2ZSBhIHdhbGxldCBjb25uZWN0ZWQgdG8geW91ciBzdG9yZSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiMS1pbnN0YWxsLWJ0Y3BheS1wbHVnaW4iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIzEtaW5zdGFsbC1idGNwYXktcGx1Z2luIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4gSW5zdGFsbCBCVENQYXkgUGx1Z2luIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2J0Y3BheXNlcnZlci9wcmVzdGFzaG9wLXBsdWdpbi9yZWxlYXNlcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkRvd25sb2FkIHRoZSBsYXRlc3QgQlRDUGF5IHBsdWdpbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJQcmVzdGFTaG9wID4gTW9kdWxlcyA+IE1vZHVsZSBNYW5hZ2VyID4gVXBsb2FkIGEgbW9kdWxlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlVwbG9hZCB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi56aXAiKV0pLAogICAgICAgICAgX3ZtLl92KCItZmlsZSB5b3UganVzdCBkb3dubG9hZGVkIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNsaWNrIG9uICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25maWd1cmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gc2V0dXAgdGhlIG1vZHVsZSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0JUQ1BheS1QcmVzdGFTaG9wLU1vZHVsZXMtSW5zdGFsbC5qcGciKSwKICAgICAgICAgICAgYWx0OiAiQlRDUGF5IFByZXN0YVNob3AgcGx1Z2luIGluc3RhbGxhdGlvbiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICIyLXBhaXJpbmctdGhlLXN0b3JlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMyLXBhaXJpbmctdGhlLXN0b3JlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMi4gUGFpcmluZyB0aGUgc3RvcmUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQlRDUGF5IFByZXN0YVNob3AgcGx1Z2luIGlzIGEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImJyaWRnZSBiZXR3ZWVuIHlvdXIgc2VydmVyIChwYXltZW50IHByb2Nlc3NvcikgYW5kIHlvdXIgZS1jb21tZXJjZSBzdG9yZSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLlxuTm8gbWF0dGVyIGlmIHlvdSdyZSB1c2luZyBhIHNlbGYtaG9zdGVkIG9yIHRoaXJkLXBhcnR5IHNvbHV0aW9uIGZyb20gc3RlcCAyLCB0aGUgcGFpcmluZyBwcm9jZXNzIGlzIGlkZW50aWNhbC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkluIHRoZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQlRDUGF5IHNlcnZlciB1cmwiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLWZpZWxkLCBlbnRlciB0aGUgZnVsbCBVUkwgb2YgeW91ciBob3N0IChpbmNsdWRpbmcgdGhlIGh0dHBzKSDigJMgaHR0cHM6Ly9idGNwYXkubXlkb21haW4uY29tIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlbGVjdCB0aGUgZGVmYXVsdCB0cmFuc2FjdGlvbiBzcGVlZCAodGhpcyB3aWxsIGNoYW5nZSBob3cgbXVjaCBCVENQYXkgcmVjb21tZW5kcyBhcyB0cmFuc2FjdGlvbiBmZWUpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlbGVjdCB0aGUgcmVsZXZhbnQgb3JkZXIgbW9kZSBmb3IgeW91ciBzdG9yZSAob3JkZXIgaXMgY3JlYXRlZCBiZWZvcmUgb3IgYWZ0ZXIgcGF5bWVudCkiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnR28gdG8geW91ciBCVENQYXkgc2VydmVyLCBzZWxlY3QgYSBzdG9yZSwgb3BlbiBpdHMgc2V0dGluZ3MgYW5kIHNlbGVjdCAiQWNjZXNzIFRva2VucyIuJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ0NsaWNrIG9uICJDcmVhdGUgYSBuZXcgdG9rZW4iLCBzZWxlY3QgeW91ciBzdG9yZSBhbmQgdGhlbiBhcHByb3ZlLlxuNS4xLiBZb3Ugd2lsbCBzZWU6ICJTZXJ2ZXIgaW5pdGlhdGVkIHBhaXJpbmcgY29kZTogWFhYWCIuJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkVudGVyIHlvdXIgcGFpcmluZyBjb2RlLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUHJlc3Mgc2F2ZS4gUHJlc3Rhc2hvcCB3aWxsIG5vdyBhdHRlbXB0IHRvIG1ha2UgYSBjb25uZWN0aW9uIHdpdGggeW91ciBCVENQYXlTZXJ2ZXIuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQSBtZXNzYWdlIHdpbGwgYmUgc2hvd24gaWYgdGhlIGNvbm5lY3Rpb24gd2FzIHN1Y2Nlc3NmdWwuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJJdCdzIHJlY29tbWVuZGVkIHRvIGRvIGEgdGVzdCBwdXJjaGFzZS4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIjMtY29udHJpYnV0ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjMy1jb250cmlidXRlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAzLiBDb250cmlidXRlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQlRDUGF5IGlzIGJ1aWx0IGFuZCBtYWludGFpbmVkIGVudGlyZWx5IGJ5IHZvbHVudGVlciBjb250cmlidXRvcnMgYXJvdW5kIHRoZSBpbnRlcm5ldC4gV2Ugd2VsY29tZSBhbmQgYXBwcmVjaWF0ZSBuZXcgY29udHJpYnV0aW9ucy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDb250cmlidXRvcnMgbG9va2luZyB0byBoZWxwIG91dCwgYmVmb3JlIG9wZW5pbmcgYSBwdWxsIHJlcXVlc3QsIHBsZWFzZSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9idGNwYXlzZXJ2ZXIvcHJlc3Rhc2hvcC1wbHVnaW4vaXNzdWVzL25ldy9jaG9vc2UiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImNyZWF0ZSBhbiBpc3N1ZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCJcbm9yIGpvaW4gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vY2hhdC5idGNwYXlzZXJ2ZXIub3JnIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJvdXIgY29tbXVuaXR5IGNoYXQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8gZ2V0IGVhcmx5IGZlZWRiYWNrLCBkaXNjdXNzIGJlc3Qgd2F5cyB0byB0YWNrbGUgdGhlIHByb2JsZW0gYW5kIHRvIGVuc3VyZSB0aGVyZSBpcyBubyB3b3JrIGR1cGxpY2F0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInByZXN0YXNob3Atc3VwcG9ydCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJlc3Rhc2hvcC1zdXBwb3J0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJlc3RhU2hvcCBTdXBwb3J0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlByZXN0YVNob3Agc3VwcG9ydCBjYW4gYmUgZm91bmQgdGhyb3VnaCBpdHMgb2ZmaWNpYWwgY2hhbm5lbHMuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cucHJlc3Rhc2hvcC5jb20iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJIb21lcGFnZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2MucHJlc3Rhc2hvcC5jb20iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJEb2N1bWVudGF0aW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5wcmVzdGFzaG9wLmNvbS9mb3J1bXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJTdXBwb3J0IEZvcnVtcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}