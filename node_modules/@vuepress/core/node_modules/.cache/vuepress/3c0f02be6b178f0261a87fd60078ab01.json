{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/HotWallet.md?vue&type=template&id=2d3ff7c6&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/HotWallet.md","mtime":1617331587405},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJidGNwYXktaG90LXdhbGxldCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYnRjcGF5LWhvdC13YWxsZXQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCVENQYXkgSG90IFdhbGxldCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiQlRDUGF5IFNlcnZlciBhbHNvIGFsbG93cyBzdG9yZXMgdG8gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiZ2VuZXJhdGUgb3IgaW1wb3J0IGEgd2FsbGV0IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB3aGlsZSBhbHNvIHN0b3JpbmcgaXRzIHByaXZhdGUga2V5cy5cblRoaXMgZW5hYmxlcyBnZW5lcmF0aW5nIG5ldyB3YWxsZXRzIGVudGlyZWx5IHdpdGhpbiBCVENQYXksIGZvciBmZWF0dXJlcyBzdWNoIGFzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvUGF5am9pbi8iIH0gfSwgW192bS5fdigiUGF5am9pbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYnRjcGF5c2VydmVyL2J0Y3BheXNlcnZlci9pc3N1ZXMvMTI4MiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkxpcXVpZCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzZWN1cml0eS1pbXBsaWNhdGlvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NlY3VyaXR5LWltcGxpY2F0aW9ucyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNlY3VyaXR5IEltcGxpY2F0aW9ucyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlN0b3JpbmcgcHJpdmF0ZSBrZXlzIG9uIGEgcHVibGljIHNlcnZlciBjb21lcyB3aXRoIHJpc2tzLlxuVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSByaXNrcyBvZiBydW5uaW5nIGFuZCB1c2luZyB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9MaWdodG5pbmdOZXR3b3JrLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiTGlnaHRuaW5nIE5ldHdvcmsiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAoZXhjZXB0IHRoYXQgeW91IGNhbiByZWNvdmVyIGZ1bmRzIHdpdGggYSBiYWNrdXApLlxuIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlBsZWFzZSwgQUxXQVlTIGJlIHN1cmUgdG8gYmFjayB1cCBhbnkgc2VlZCB0aGF0IGlzIGdlbmVyYXRlZCBieSB0aGlzIGZlYXR1cmUgYW5kIHRvIG5ldmVyIGxlYXZlIG1vbmV5IHlvdSBjYW5ub3QgYWZmb3JkIHRvIGxvc2Ugc3BlbmRhYmxlIGJ5IHRob3NlIHByaXZhdGUga2V5cyIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlcXVpcmVtZW50cy1mb3ItaG90LXdhbGxldCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcmVxdWlyZW1lbnRzLWZvci1ob3Qtd2FsbGV0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVxdWlyZW1lbnRzIGZvciBIb3QgV2FsbGV0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnQnkgZGVmYXVsdCwgeW91IG5lZWQgdG8gYmUgYSBzZXJ2ZXIgYWRtaW4gdG8gdXNlIHRoZSBob3Qgd2FsbGV0IGZlYXR1cmUuXG5UaGlzIGlzIGJlY2F1c2Ugc2VydmVyIGFkbWlucyBhcmUgYWJsZSB0byBleHRyYWN0IHRoZSBwcml2YXRlIGtleSBlYXNpbHkuXG5JZiBmb3Igc29tZSByZWFzb24gKHN1Y2ggYXMgYWxsb3dpbmcgaW5kaXZpZHVhbHMgdGhhdCB0cnVzdCB5b3UgZW5vdWdoIHdpdGggdGhlaXIgc3RvcmUpLCB5b3UgY2FuIGVuYWJsZSB0aGUgaG90IHdhbGxldCBmb3Igbm9uLWFkbWlucyBmcm9tIFNlcnZlciBTZXR0aW5ncyA+IFBvbGljaWVzID4gIkFsbG93IG5vbi1hZG1pbnMgdG8gY3JlYXRlIGhvdCB3YWxsZXRzIGZvciB0aGVpciBzdG9yZXMiLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9ob3R3YWxsZXQvU2VydmVyU2V0dGluZ3MucG5nIiksCiAgICAgICAgICAgIGFsdDogIkJUQ1BheSBTZXJ2ZXIgc2V0dGluZ3MiLAogICAgICAgICAgICB0aXRsZTogIkJUQ1BheSBTZXJ2ZXIgc2V0dGluZ3MiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2V0dGluZy11cC15b3VyLXN0b3JlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzZXR0aW5nLXVwLXlvdXItc3RvcmUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTZXR0aW5nIHVwIHlvdXIgc3RvcmUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiU2V0dGluZyB1cCBhICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJob3Qgd2FsbGV0IildKSwKICAgICAgICBfdm0uX3YoIiBpcyBxdWl0ZSBlYXN5LiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiR28gdG8geW91ciBCVENQYXkgU2VydmVy4oCZcyBTdG9yZSA+IFNldHRpbmdzID4gV2FsbGV0ID4gU2V0dXAiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNyZWF0ZSBuZXcgd2FsbGV0IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDaG9vc2UgSG90IFdhbGxldCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2hvb3NlIHRoZSB3YWxsZXQncyBhZGRyZXNzIGZvcm1hdCA+IENvbnRpbnVlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJZb3UgTVVTVCBiYWNrdXAgdGhpcyBzZWVkIHJlc3BvbnNpYmx5LiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUaGUgcHVibGljIGtleSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgaW1wb3J0ZWQgaW4gdGhlIHN0b3JlLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3BlbmRpbmctZnVuZHMtd2l0aC1idGNwYXktaG90LXdhbGxldCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3BlbmRpbmctZnVuZHMtd2l0aC1idGNwYXktaG90LXdhbGxldCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNwZW5kaW5nIGZ1bmRzIHdpdGggQlRDUGF5IEhvdCBXYWxsZXQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmNlIHlvdeKAmXZlIHJlY2VpdmVkIGZ1bmRzIHRvIHlvdXIgd2FsbGV0IGFuZCB5b3UgZGVjaWRlIHRvIHNwZW5kIHRoZW0sIHlvdSBjYW4gc2lnbiB0aGUgdHJhbnNhY3Rpb24gYXV0b21hdGljYWxseSwgYWxsIGluc2lkZSBCVENQYXkgU2VydmVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkluIEJUQ1BheSBTZXJ2ZXIsIGdvIHRvID4gV2FsbGV0cyA+IE1hbmFnZSA+IFNlbmQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkZpbGwgaW4gdGhlIERlc3RpbmF0aW9uIGFkZHJlc3MgYW5kIHRoZSBBbW91bnQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNlbGVjdCBTaWduIHRoZSBob3Qgd2FsbGV0IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSZXZpZXcgdGhlIHRyYW5zYWN0aW9uIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJCcm9hZGNhc3QgdGhlIHRyYW5zYWN0aW9uIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvaG90d2FsbGV0L1dhbGxldFNlbmQucG5nIiksCiAgICAgICAgICAgIGFsdDogIkJUQ1BheSBTZXJ2ZXIgU2VuZCB0YWIiLAogICAgICAgICAgICB0aXRsZTogIkJUQ1BheSBTZXJ2ZXIgU2VuZCB0YWIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmVkdWNpbmctcmlzayIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVkdWNpbmctcmlzayIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVkdWNpbmcgcmlzayIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFzIG1lbnRpb25lZCBhYm92ZSwgdGhlIGhvdCB3YWxsZXQgZnVuY3Rpb25hbGl0eSBpbmNsdWRlcyByaXNrIG9mIGZ1bmRzIGJlaW5nIHN0b2xlbiBpbiB0aGUgY2FzZSBvZiB0aGUgc2VydmVyIG9yIGFjY291bnQgYmVpbmcgY29tcHJvbWlzZWQuXG5UbyBtaXRpZ2F0ZSB0aGlzIHJpc2ssIHdlIGFkdmlzZSB5b3UgdG86IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRW5hYmxlIHR3byBmYWN0b3Igb3IgVTJGIGF1dGhlbnRpY2F0aW9uIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJPY2Nhc2lvbmFsbHkgbW92ZSBmdW5kcyB0byB5b3VyIGNvbGQgc3RvcmFnZSBlaXRoZXIgbWFudWFsbHkgb3IgYnkgY29uZmlndXJpbmcgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9idGNwYXlzZXJ2ZXIvYnRjVHJhbnNtdXRlci9ibG9iL21hc3Rlci9SRUFETUUubWQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCVEMgVHJhbnNtdXRlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgd2l0aCBhdXRvbWF0aWMgcGF5bWVudCBmb3J3YXJkaW5nLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayBkYW5nZXIiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFtfdm0uX3YoIldBUk5JTkciKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRvIG5vdCBnaXZlIGFueW9uZSBlbHNlIGFjY2VzcyB0byB5b3VyIHNlcnZlcidzIFNTSCBrZXlzIG9yIHNlcnZlciBhY2NvdW50IGNyZWRlbnRpYWxzIHdoZW4gdXNpbmcgYSBob3Qgd2FsbGV0LiBBbnlvbmUgd2l0aCBhY2Nlc3MgdG8geW91ciBhY2NvdW50IGNhbiBzcGVuZCB0aGUgZnVuZHMgZnJvbSB5b3VyIGhvdCB3YWxsZXQuIElmIHlvdSBuZWVkIHRvIGFsbG93IGFjY291bnQgYWNjZXNzIHRvIGVtcGxveWVlcywgZGV2ZWxvcGVycywgZXRjLiB1c2UgYW4gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9XYWxsZXRTZXR1cC8jdXNlLWFuLWV4aXN0aW5nLXdhbGxldCIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoInhwdWIgY29ubmVjdGVkIHdhbGxldCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiBpbnN0ZWFkLiIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaW1wb3J0aW5nLXNlZWRzLXdpdGgtYW4tZXhpc3RpbmctYmFsYW5jZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaW1wb3J0aW5nLXNlZWRzLXdpdGgtYW4tZXhpc3RpbmctYmFsYW5jZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEltcG9ydGluZyBzZWVkcyB3aXRoIGFuIGV4aXN0aW5nIGJhbGFuY2UiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIllvdSBjYW4gYWxzbyAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJpbXBvcnQgYW4gZXhpc3Rpbmcgc2VlZCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAodGhlbiByZS1zY2FuIGl0IHRvIHNob3cgdGhlICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1dhbGxldC8jcmUtc2NhbiIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiY3VycmVudCBiYWxhbmNlIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIpIGJ1dCBpdCBpcyBub3QgcmVjb21tZW5kZWQuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}