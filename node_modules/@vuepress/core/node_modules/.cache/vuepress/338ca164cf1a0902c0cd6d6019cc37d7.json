{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/TryItOut.md?vue&type=template&id=45dd0e1f&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/TryItOut.md","mtime":1617331587412},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ0cnktaXQtb3V0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0cnktaXQtb3V0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUcnkgaXQgb3V0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoaXMgc2VjdGlvbiBnb2VzIHRocm91Z2ggdGhlIHByb2Nlc3Mgb2YgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiY3JlYXRpbmcgYW4gYWNjb3VudCBhbmQgc3RvcmUgb24gb3VyIHB1YmxpYyBCVENQYXkgc2VydmVyIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIi4gKEZvciBldmFsdWF0aW9uIHB1cnBvc2UpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIllvdSBjYW4gYWxzbyBmb2xsb3cgYWxvbmcgaW4gdGhpcyB2aWRlbzoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAieXRFbWJlZCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgInVybChodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS94aDNFYWM2NnFjNC9ocWRlZmF1bHQuanBnKSIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj14aDNFYWM2NnFjNCIsCiAgICAgICAgICAgICJkYXRhLWlkIjogInhoM0VhYzY2cWM0IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUiLAogICAgICAgICAgICAgICJkYXRhLXNyYyI6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQveGgzRWFjNjZxYzQ/JmF1dG9wbGF5PTEmYXV0b2hpZGU9MSZtb2Rlc3RicmFuZGluZz0xJmNvbG9yPXdoaXRlJnJlbD0wIiwKICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgICAgIGFsbG93OiAiYXV0b3BsYXk7ZW5jcnlwdGVkLW1lZGlhO3BpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjcmVhdGUteW91ci1maXJzdC1pbnZvaWNlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjcmVhdGUteW91ci1maXJzdC1pbnZvaWNlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ3JlYXRlIHlvdXIgZmlyc3QgaW52b2ljZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiRm9yIGFuIGluIHByb2R1Y3Rpb24gc2V0dXAsIHNraXAgdG8gIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvVHJ5SXRPdXQvI21haW5uZXQiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIk1haW5uZXQiKQogICAgICAgICAgXSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0ZXN0bmV0IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0ZXN0bmV0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgVGVzdG5ldCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJGaXJzdCBsZXQncyBjcmVhdGUgYSBuZXcgc3RvcmU6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkdvIHRvIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdGVzdG5ldC5kZW1vLmJ0Y3BheXNlcnZlci5vcmcvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiVGVzdG5ldCB3ZWJzaXRlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk9uIHRoZSByaWdodCBzaWRlIGNsaWNrIG9uICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNyZWF0ZSBhbiBhY2NvdW50IildKSwKICAgICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90ZXN0bmV0LmRlbW8uYnRjcGF5c2VydmVyLm9yZy9BY2NvdW50L1JlZ2lzdGVyIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiY3JlYXRlIGFuIGFjY291bnQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIG9yICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNpZ24gSW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgaWYgeW91IGFscmVhZHkgaGF2ZSBhbiBhY2NvdW50LiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBZnRlciBoYXZpbmcgc2lnbmVkIGluLCBnbyB0byAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTdG9yZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90ZXN0bmV0LmRlbW8uYnRjcGF5c2VydmVyLm9yZy9zdG9yZXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJjcmVhdGUgYSBuZXcgc3RvcmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJMZXQncyB1c2UgRWxlY3RydW0gdG8gY3JlYXRlIGEgdGVzdG5ldCB3YWxsZXQgZm9yIHlvdXIgc3RvcmU6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJEb3dubG9hZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZWxlY3RydW0ub3JnIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiRWxlY3RydW0iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUnVuIEVsZWN0cnVtIHdpdGggcGFyYW1ldGVyICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLXRlc3RuZXQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKGkuZS4gb24gTWFjIE9TIHVzaW5nICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcGVuIC1hIEVsZWN0cnVtLmFwcCAtLWFyZ3MgLS10ZXN0bmV0IildKSwKICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2xpY2sgdGhyb3VnaCB0aGUgd2l6YXJkIGFuZCBjcmVhdGUgYSB0ZXN0IHdhbGxldCwgdXNpbmcgdGhlIGRlZmF1bHQgc2V0dGluZ3MgRWxlY3RydW0gcHJvcG9zZXMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnQWZ0ZXIgdGhlIHdhbGxldCBpcyBzZXQgdXAsIGdvIHRvICJXYWxsZXQiID4gIkluZm9ybWF0aW9uIiBpbiB0aGUgRWxlY3RydW0gbWVudS4nCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCdDb3B5IHRoZSAiTWFzdGVyIFB1YmxpYyBLZXkiIHN0cmluZyAoc3RhcnRpbmcgYnkgJyksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipwdWIuLi4iKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiTGV0J3MgY29uZmlndXJlIHRoZSBzdG9yZSBzbyBpdCB1c2VzIHlvdXIgRWxlY3RydW0gd2FsbGV0OiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkdvIHRvIHRoZSBTZXR0aW5ncyBwYWdlIG9mIHlvdXIgc3RvcmUgaW4gQlRDUGF5IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdPbiB0aGUgIkdlbmVyYWwgU2V0dGluZ3MiIHBhZ2UgeW91IHdpbGwgZmluZCB0aGUgIldhbGxldCIgc2VjdGlvbiAtIGNsaWNrIHRoZSAiU2V0dXAiIGJ1dHRvbiBmb3IgY29uZmlndXJpbmcgYW4gb24tY2hhaW4gd2FsbGV0LicKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdQYXN0ZSB0aGUgIk1hc3RlciBQdWJsaWMgS2V5IiBjb3BpZWQgZnJvbSBFbGVjdHJ1bSBpbnRvIHRoZSAiRGVyaXZhdGlvbiBTY2hlbWUiIHRleHQgZmllbGQgYW5kIGNsaWNrICJDb250aW51ZSInCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnQ29uZmlybSB0aGUgYWRkcmVzc2VzIGJ5IGNsaWNraW5nIG9uICJSZWNlaXZlIiBpbiBFbGVjdHJ1bTogVGhlICJSZWNlaXZpbmcgYWRkcmVzcyIgc2hvdWxkIG1hdGNoIHRoZSBmaXJzdCBhZGRyZXNzIHNob3duIGluIEJUQ1BheScKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFmdGVyIHRoYXQgeW91ciB0ZXN0IHdhbGxldCBzaG91bGQgYXBwZWFyIG9uIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdGVzdG5ldC5kZW1vLmJ0Y3BheXNlcnZlci5vcmcvd2FsbGV0cyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIldhbGxldHMgcGFnZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgb2YgeW91ciBCVENQYXkgYWNjb3VudCIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZW4geW91IGNhbiBjcmVhdGUgYW4gaW52b2ljZSwgZWl0aGVyIHRocm91Z2giKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoJ3RoZSAiSW52b2ljZSIgbWVudSBvbiB0aGUgd2Vic2l0ZSBvcicpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoInRoZSBwcm9jZXNzIGRvY3VtZW50ZWQgb24gdGhlICIpLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvQ3VzdG9tSW50ZWdyYXRpb24vIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkN1c3RvbSBpbnRlZ3JhdGlvbiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWFpbm5ldCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbWFpbm5ldCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIE1haW5uZXQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiRmlyc3QgY2hvb3NlIHdoZXJlIHRvIHNldHVwIHlvdXIgc3RvcmUuXG5FaXRoZXI6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSG9zdCB5b3VyIHN0b3JlIG9uIHNvbWVvbmUgZWxzZSdzIEJUQ1BheSBTZXJ2ZXIuIFlvdSBjYW4gZmluZCBhIGxpc3Qgb2YgdGhpcmQtcGFydHkgaG9zdHMgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi9UaGlyZFBhcnR5SG9zdGluZy8jd2hlcmUtaXMtdGhlLWxpc3Qtb2YtYnRjcGF5LXRoaXJkLXBhcnR5LWhvc3RzIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiaGVyZSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJPciAiKSwKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0RlcGxveW1lbnQvIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImRlcGxveSB5b3VyIG93biIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNsaWNrIG9uIHRoZSBmb2xsb3dpbmcgbGlua3MgZm9yIGRldGFpbGVkIGluc3RydWN0aW9ucyBvbiBob3cgdG8gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9SZWdpc3RlckFjY291bnQvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJSZWdpc3RlciBhbiBhY2NvdW50IikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0NyZWF0ZVN0b3JlLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQ3JlYXRlIHlvdXIgZmlyc3Qgc3RvcmUiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvV2FsbGV0U2V0dXAvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDb25uZWN0IHlvdXIgb3duIHdhbGxldCIpCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGludm9pY2UsIGVpdGhlciB0aHJvdWdoIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCdUaGUgIkludm9pY2UiIG1lbnUgb24gdGhlIHdlYnNpdGUgb3InKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJUaGUgcHJvY2VzcyBkb2N1bWVudGVkIG9uIHRoZSAiKSwKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0N1c3RvbUludGVncmF0aW9uLyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDdXN0b20gaW50ZWdyYXRpb24iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiU2VlIHRoZSAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9XaGF0c05leHQvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJXaGF0J3MgTmV4dCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIHBhZ2UgZm9yIG90aGVyIG9wdGlvbnMgb24gaG93IHRvIGNvbnRpbnVlIGV4cGxvcmluZyBCVENQYXkuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJidGNwYXktc2VydmVyLWRlbW8iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2J0Y3BheS1zZXJ2ZXItZGVtbyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJUQ1BheSBTZXJ2ZXIgRGVtbyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIHNlZSBCVENQYXkgU2VydmVyIGluIGFjdGlvbiwgdmlzaXQgb3VyIGRlbW8gYXBwcyBhbmQgc3RvcmVzIG9yIGNoZWNrIG91dCBzb21lIG9mIHRoZSBzdG9yZXMgdXNpbmcgQlRDUGF5IFNlcnZlciBpbiBwcm9kdWN0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc3RvcmUuYnRjcGF5c2VydmVyLm9yZy8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCVENQYXkgRGVtbyBTdG9yZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tYWlubmV0LmRlbW8uYnRjcGF5c2VydmVyLm9yZy9hcHBzLzg3a2o1eUtheThtQjRVVVpjSmhaSDVUcURLTUQzQ3puandMaml1MW9ZWlhlL3BvcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlBvaW50IG9mIFNhbGUgRGVtbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kaXJlY3RvcnkuYnRjcGF5c2VydmVyLm9yZyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkluLXByb2R1Y3Rpb24gc3RvcmVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}