{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Payjoin.md?vue&type=template&id=129b48f1&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Payjoin.md","mtime":1617331587407},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJidGNwYXktc2VydmVyLXBheWpvaW4tZ3VpZGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2J0Y3BheS1zZXJ2ZXItcGF5am9pbi1ndWlkZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJUQ1BheSBTZXJ2ZXIgUGF5am9pbiBHdWlkZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGRvY3VtZW50IGV4cGxhaW5zIGhvdyB0byB1c2UgQlRDUGF5IFNlcnZlcidzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQYXlqb2luIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZlYXR1cmUuIEZvciBhIGRldGFpbGVkLCB0ZWNobmljYWwgZXhwbGFuYXRpb24gb2YgaG93IHBheWpvaW4gaXMgaW1wbGVtZW50ZWQsIGNoZWNrICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA3OC5tZWRpYXdpa2kiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkJJUDc4IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZb3UgY2FuIGZvbGxvdyB0aGlzIHZpZGVvIHRvIGJldHRlciB1bmRlcnN0YW5kIHdoYXQgcGF5am9pbiBpcyBhbmQgaG93IHRvIHVzZSBpdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInl0RW1iZWQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICJ1cmwoaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvLVdycXY2blNtQU0vaHFkZWZhdWx0LmpwZykiCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LVdycXY2blNtQU0iLAogICAgICAgICAgICAiZGF0YS1pZCI6ICItV3JxdjZuU21BTSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgdGl0bGU6ICJZb3VUdWJlIiwKICAgICAgICAgICAgICAiZGF0YS1zcmMiOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkLy1XcnF2Nm5TbUFNPyZhdXRvcGxheT0xJmF1dG9oaWRlPTEmbW9kZXN0YnJhbmRpbmc9MSZjb2xvcj13aGl0ZSZyZWw9MCIsCiAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgICAgICBhbGxvdzogImF1dG9wbGF5O2VuY3J5cHRlZC1tZWRpYTtwaWN0dXJlLWluLXBpY3R1cmUiLAogICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZW5hYmxpbmctcGF5am9pbi1hcy1hLW1lcmNoYW50IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlbmFibGluZy1wYXlqb2luLWFzLWEtbWVyY2hhbnQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFbmFibGluZyBQYXlqb2luIGFzIGEgbWVyY2hhbnQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDcmVhdGUgYSBzdG9yZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIkNvbmZpZ3VyZSBhICIpLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvSG90V2FsbGV0LyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJob3Qgd2FsbGV0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGZvciB5b3VyIGRlcml2YXRpb24gc2NoZW1lLiBCZSBzdXJlIHRvIHVzZSBlaXRoZXIgc2Vnd2l0IG9yIHNlZ3dpdCB3cmFwcGVkIGFzIHRoZSBhZGRyZXNzIHR5cGUuIgogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnRW5hYmxlIFBheWpvaW4vUDJFUCBpbiB0aGUgIkdlbmVyYWwgU2V0dGluZ3MiIGFuZCBjbGljayAiU2F2ZSInCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQncyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IHlvdSB3aWxsIG5lZWQgYXQgbGVhc3QgMSBVVFhPIGZvciBwYXlqb2luIHRvIHdvcmsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL3BheWpvaW4vUGF5am9pbl9HdWlkZV9SZWNlaXZlXzEucG5nIiksCiAgICAgICAgICAgIGFsdDogIlJlY2VpdmUgUGF5Sm9pbiBpbiBCVENQYXkgU2VydmVyIiwKICAgICAgICAgICAgdGl0bGU6ICJSZWNlaXZlIFBheUpvaW4gaW4gQlRDUGF5IFNlcnZlciIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvcGF5am9pbi9QYXlqb2luX0d1aWRlX1JlY2VpdmVfMi5wbmciKSwKICAgICAgICAgICAgYWx0OiAiUmVjZWl2ZSBQYXlKb2luIGluIEJUQ1BheSBTZXJ2ZXIiLAogICAgICAgICAgICB0aXRsZTogIlJlY2VpdmUgUGF5Sm9pbiBpbiBCVENQYXkgU2VydmVyIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9wYXlqb2luL1BheWpvaW5fR3VpZGVfUmVjZWl2ZV8zLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJSZWNlaXZlIFBheUpvaW4gaW4gQlRDUGF5IFNlcnZlciIsCiAgICAgICAgICAgIHRpdGxlOiAiUmVjZWl2ZSBQYXlKb2luIGluIEJUQ1BheSBTZXJ2ZXIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicGF5aW5nLXRvLXBheWpvaW4tYXMtYS11c2VyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXlpbmctdG8tcGF5am9pbi1hcy1hLXVzZXIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQYXlpbmcgdG8gUGF5am9pbiBhcyBhIHVzZXIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9XYWxsZXQvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJCVENQYXkgV2FsbGV0IikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgc3VwcG9ydHMgUGF5am9pbi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlJldHJpZXZlIHRoZSBCSVAyMSBwYXltZW50IGxpbmsgZnJvbSBhIEJUQ1BheSBTZXJ2ZXIgaW52b2ljZSB3aGljaCBoYXMgcGF5am9pbiBlbmFibGVkIGJ5IGVpdGhlcjpcbiIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNjYW4gdGhlIFFSIGNvZGUgd2l0aCB0aGUgY2FtZXJhIHNjYW5uaW5nIGZlYXR1cmUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAnQ29weSB0aGUgbGluayBmcm9tIHRoZSAiT3BlbiBpbiB3YWxsZXQiIGJ1dHRvbiBhbmQgcGFzdGUgaXQgaW4gdGhlICJQYXJzZSBCSVAyMSIgcHJvbXB0JwogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnVGhlIHNlbmQgZm9ybSBzaG91bGQgYmUgcG9wdWxhdGVkIHdpdGggdGhlIHBheW1lbnQgZGV0YWlscy4gWW91IGNhbiBjaGVjayBpZiB0aGUgaW52b2ljZSBzdXBwb3J0cyBwYXlqb2luIGJ5IGV4cGFuZGluZyB0aGUgImFkdmFuY2VkIHNldHRpbmdzIiBhbmQgc2VlIGlmIHRoZXJlIGlzIGEgIlBheWpvaW4gZW5kb2ludCIgaW5wdXQgd2l0aCBhIHVybC4nCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlNpZ24geW91ciB0cmFuc2FjdGlvbiB1c2luZyBlaXRoZXIgQlRDUGF5IFNlcnZlcidzIGhhcmR3YXJlIHdhbGxldCBzdXBwb3J0IHZpYSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9IYXJkd2FyZVdhbGxldEludGVncmF0aW9uLyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCVENQYXkgVmF1bHQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgb3IgdGhlICIpLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvSG90V2FsbGV0LyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJob3Qgd2FsbGV0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIGZlYXR1cmUuIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJPbmNlIHlvdXIgb3JpZ2luYWwgdHJhbnNhY3Rpb24gaXMgcmVhZHksIHlvdSB3aWxsIGJlIGdpdmVuIHRoZSBvcHRpb24gdG8gZWl0aGVyICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJyb2FkY2FzdCAoUGF5am9pbikiKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3IgdG8gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJyb2FkY2FzdCAoU2ltcGxlKSIpXSksCiAgICAgICAgICBfdm0uX3YoIi4gQ2hvb3NlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJCcm9hZGNhc3QgKFBheWpvaW4pIildKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHBheWpvaW4gc2VydmVyIHdpbGwgcHJvcG9zZSBhIG5ldyBzcGVjaWFsIHRyYW5zYWN0aW9uLCBpZiBwb3NzaWJsZS4gSWYgdGhlIHBheWpvaW4gc2VydmVyIGlzIHVuYWJsZSB0byBkbyB0aGUgcGF5am9pbiwgdGhlIG9yaWdpbmFsIHRyYW5zYWN0aW9uIGlzIGJyb2FkY2FzdCBpbnN0ZWFkLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJZiB5b3UgYXJlIHVzaW5nIGEgaGFyZHdhcmUgd2FsbGV0LCB5b3Ugd2lsbCBiZSBhc2tlZCB0byBzaWduIHRoZSBwYXlqb2luIHRyYW5zYWN0aW9uIGFnYWluICh0aGUgaG90IHdhbGxldCBmZWF0dXJlIHNpZ25zIHRoZSB0cmFuc2FjdGlvbiBmb3IgeW91IGF1dG9tYXRpY2FsbHkpLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDb25ncmF0dWxhdGlvbnMsIHlvdSd2ZSBqdXN0IGhlbHBlZCBpbXByb3ZlIEJpdGNvaW4ncyBmdW5naWJpbGl0eSBhbmQgeW91ciBmaW5hbmNpYWwgc292ZXJlaWduaXR5ISIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvcGF5am9pbi9QYXlqb2luX0d1aWRlX1BheV8xLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJSZWNlaXZlIFBheUpvaW4gaW4gQlRDUGF5IFNlcnZlciIsCiAgICAgICAgICAgIHRpdGxlOiAiUmVjZWl2ZSBQYXlKb2luIGluIEJUQ1BheSBTZXJ2ZXIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL3BheWpvaW4vUGF5am9pbl9HdWlkZV9QYXlfMi5wbmciKSwKICAgICAgICAgICAgYWx0OiAiUmVjZWl2ZSBQYXlKb2luIGluIEJUQ1BheSBTZXJ2ZXIiLAogICAgICAgICAgICB0aXRsZTogIlJlY2VpdmUgUGF5Sm9pbiBpbiBCVENQYXkgU2VydmVyIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9wYXlqb2luL1BheWpvaW5fR3VpZGVfUGF5XzMucG5nIiksCiAgICAgICAgICAgIGFsdDogIlJlY2VpdmUgUGF5Sm9pbiBpbiBCVENQYXkgU2VydmVyIiwKICAgICAgICAgICAgdGl0bGU6ICJSZWNlaXZlIFBheUpvaW4gaW4gQlRDUGF5IFNlcnZlciIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvcGF5am9pbi9QYXlqb2luX0d1aWRlX1BheV80LnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJSZWNlaXZlIFBheUpvaW4gaW4gQlRDUGF5IFNlcnZlciIsCiAgICAgICAgICAgIHRpdGxlOiAiUmVjZWl2ZSBQYXlKb2luIGluIEJUQ1BheSBTZXJ2ZXIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAid2h5LWRpZC1hLXBheWpvaW4tbm90LWhhcHBlbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2h5LWRpZC1hLXBheWpvaW4tbm90LWhhcHBlbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoeSBkaWQgYSBwYXlqb2luIG5vdCBoYXBwZW4/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZXJlJ3MgbXVsdGlwbGUgcmVhc29ucyBmb3IgdGhpczoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBzdG9yZSBkaWQgbm90IGhhdmUgYW55IHV0eG9zIHRvIGNvbnRyaWJ1dGUgdG93YXJkcyBhIHBheWpvaW4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91ciB3YWxsZXQgZG9lcyBub3QgdXNlIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGUgc3RvcmUncyAoZXNzZW50aWFsIHRvIG5vdCByYWlzZSBzdXNwaWNpb24gdG8gYW5hbHlzaXMgY29tcGFuaWVzKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJZb3UgYXJlIG5vdCB1c2luZyBzZWd3aXQgb3IgcDJzaCB3cmFwcGVkIHNlZ3dpdC4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSBwYXlqb2luIHNlcnZlciBpcyBub3QgYXZhaWxhYmxlIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzdXBwb3J0ZWQtd2FsbGV0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3VwcG9ydGVkLXdhbGxldHMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTdXBwb3J0ZWQgd2FsbGV0cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBsZWFzZSBjb250YWN0IGFuZCBlbmNvdXJhZ2UgeW91ciB3YWxsZXQgZGV2ZWxvcGVycyB0byBhZGQgc3VwcG9ydC4gVGhlIG1vcmUgd2lkZXNwcmVhZCB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJ1c2FnZSBvZiBwYXlqb2luIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgdGhlIG1vcmUgYnJva2VuIHRoZSBoZXVyaXN0aWNzIHVzZWQgYnkgYmxvY2tjaGFpbiBhbmFseXNpcyBjb21wYW5pZXMgYmVjb21lIGFuZCBjYW4gZWZmZWN0aXZlbHkgdHJhY2UgeW91ciBmaW5hbmNpYWwgaGlzdG9yeS4gSWYgeW91IGFyZSBhIHdhbGxldCBkZXZlbG9wZXIsIHBsZWFzZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0NvbW11bml0eS8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImNvbnRhY3QgdXMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBpZiB5b3UgbmVlZCBoZWxwIG9yIGhhdmUgZmVlZGJhY2suIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}