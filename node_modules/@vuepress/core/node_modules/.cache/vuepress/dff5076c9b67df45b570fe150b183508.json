{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/UseCase.md?vue&type=template&id=00d4bf4c&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/UseCase.md","mtime":1617331587413},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJidGNwYXktc2VydmVyLXVzZS1jYXNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYnRjcGF5LXNlcnZlci11c2UtY2FzZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCVENQYXkgU2VydmVyIFVzZSBDYXNlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJ1aWx0IHdpdGggdGhlIGNvbW11bml0eSBpbiBtaW5kLCBCVENQYXkgU2VydmVyIGlzIGEgZmVhdHVyZS1yaWNoIHNvZnR3YXJlIHdpdGggIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInBsZW50eSBvZiB1c2UtY2FzZXMiKV0pLAogICAgICAgIF92bS5fdigiIHRoYXQgY2FuIHNvbHZlIHByb2JsZW1zIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgdXNlcnMuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL2luZm9ncmFwaGljcy9CVENQYXlVc2VDYXNlSW5mb2dyYXBoaWMucG5nIiksCiAgICAgICAgICAgIGFsdDogIkJUQ1BheSBVc2VDYXNlIEluZm9ncmFwaGljIiwKICAgICAgICAgICAgdGl0bGU6ICJCVENQYXkgU2VydmVyIFVzZUNhc2UgSW5mb2dyYXBoaWMiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHNvZnR3YXJlIHVzYWdlIGlzIGJ5IG5vIG1lYW5zIGxpbWl0ZWQgdG8gdGhlIGdyb3VwcyBvZiB1c2VycyBtZW50aW9uZWQgaW4gdGhpcyBkb2N1bWVudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJtZXJjaGFudHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI21lcmNoYW50cyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWVyY2hhbnRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkJ5ICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjaG9vc2luZyBCVENQYXkgU2VydmVyIHRvIHByb2Nlc3MgcGF5bWVudHMiKV0pLAogICAgICAgIF92bS5fdigiLCBtZXJjaGFudHMgYXJlOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNhdmluZyBtb25leSAobm8gZmVlcywgbm8gc3Vic2NyaXB0aW9ucykiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkN1dHRpbmcgb3V0IHRoZSBtaWRkbGUtbWFuIChQYXltZW50cyBnbyBkaXJlY3RseSB0byB0aGVpciB3YWxsZXQpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkVuaGFuY2luZyBwcml2YWN5IGZvciB0aGVpciBjdXN0b21lcnMgKG5vIGFkZHJlc3MgcmUtdXNlLCBubyBpbmZvcm1hdGlvbiBsZWFrcyB0byB0aGlyZCBwYXJ0aWVzKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTYXZpbmcgdGltZSAoZWFzeSBpbnRlZ3JhdGlvbiBhbmQgaW5zdGFsbGF0aW9uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUHJvdGVjdGluZyB0aGVtc2VsdmVzIGZyb20gaW50ZXJmZXJlbmNlIGluIHRoZWlyIGJ1c2luZXNzIChzZWxmLXNvdmVyZWlnbnR5KSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJvbmxpbmUtc3RvcmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI29ubGluZS1zdG9yZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT25saW5lIFN0b3JlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJNZXJjaGFudHMgcnVubmluZyBhbiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJlLWNvbW1lcmNlIGJ1c2luZXNzIildKSwKICAgICAgICAgIF92bS5fdigiIGNhbiBlYXNpbHkgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvRGVwbG95bWVudC8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImRlcGxveSBCVENQYXkgU2VydmVyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFuZCBjb25uZWN0IGl0IHRvIHRoZWlyIHN0b3JlIHZpYSBpbnRlZ3JhdGlvbiBwbHVnaW5zIGluIGp1c3QgYSBmZXcgY2xpY2tzLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCVENQYXkgU2VydmVyIGNoZWNrb3V0IGlzIG5vIGRpZmZlcmVudCB0byBhbnkgb3RoZXIgcGF5bWVudCBnYXRld2F5LiBUaGUgY3VzdG9tZXIgZ2V0cyBhbiBpbnZvaWNlLiBUaGV5IHBheSBpdCBieSBzY2FubmluZyBhIFFSIGNvZGUgb3IgYnkgY29weS1wYXN0aW5nIHRoZSBhbW91bnQgYW5kIHRoZSBhZGRyZXNzLiBXaGVuIHRoZWlyIHBheW1lbnQgaXMgY29uZmlybWVkLCB0aGUgbWVyY2hhbnQgaXMgbm90aWZpZWQgdmlhIHRoZSBlLWNvbW1lcmNlIHNvZnR3YXJlLCBhbmQgY2FuIHNoaXAgdGhlIGl0ZW0uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRha2UgYSBsb29rIGF0ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3N0b3JlLmJ0Y3BheXNlcnZlci5vcmcvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJvdXIgZGVtbyBvbmxpbmUgc3RvcmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBoeXNpY2FsLXN0b3JlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwaHlzaWNhbC1zdG9yZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUGh5c2ljYWwgU3RvcmUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkZvciBicmljayBhbmQgbW9ydGFyIHN0b3JlcywgQlRDUGF5IFNlcnZlciBoYXMgYSAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9BcHBzLyNwb2ludC1vZi1zYWxlLWFwcCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigid2ViLWJhc2VkIFBvaW50IG9mIFNhbGUiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIFNpbWlsYXJseSB0byB0aGUgb25saW5lIHN0b3JlLCB0aGUgY3VzdG9tZXIgaXMgcHJlc2VudGVkIHdpdGggYW4gaW52b2ljZSB0aGF0IGhlIGNhbiBwYXkgb24gdGhlIHNwb3QuIFRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBPUyBhcHAiKV0pLAogICAgICAgICAgX3ZtLl92KCIgY2FuIGJlIHJ1biBvbiBhbnkgd2ViLWNvbm5lY3RlZCBkZXZpY2UuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGFrZSBhIGxvb2sgYXQgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL21haW5uZXQuZGVtby5idGNwYXlzZXJ2ZXIub3JnL2FwcHMvM3V0QlRmU0trVzRnSzdhUU1kMmhXNUJoOUZwYS9wb3MiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIm91ciBkZW1vIFBPUyBhcHAiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAieXRFbWJlZCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgInVybChodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS85bjgxcW56bFBmOC9ocWRlZmF1bHQuanBnKSIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05bjgxcW56bFBmOCIsCiAgICAgICAgICAgICJkYXRhLWlkIjogIjluODFxbnpsUGY4IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUiLAogICAgICAgICAgICAgICJkYXRhLXNyYyI6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvOW44MXFuemxQZjg/JmF1dG9wbGF5PTEmYXV0b2hpZGU9MSZtb2Rlc3RicmFuZGluZz0xJmNvbG9yPXdoaXRlJnJlbD0wIiwKICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgICAgIGFsbG93OiAiYXV0b3BsYXk7ZW5jcnlwdGVkLW1lZGlhO3BpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzZWxmLXNvdmVyZWlnbi1pbmRpdmlkdWFscyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2VsZi1zb3ZlcmVpZ24taW5kaXZpZHVhbHMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTZWxmLXNvdmVyZWlnbiBpbmRpdmlkdWFscyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcml2YWN5LW1pbmRlZCBpbmRpdmlkdWFscyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgY2FuIHVzZSBCVENQYXkgU2VydmVyIGludGVybmFsIHdhbGxldCBmb3IgdGhlaXIgZXZlcnlkYXkgY3J5cG9jdXJyZW5jeSB0cmFuc2FjdGlvbnMgd2l0aG91dCBwcm92aWRpbmcgYSBwcml2YXRlIGtleS4gRm9yIHNlbGYtaG9zdGVkIHNlcnZlcnMsIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1dhbGxldC8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImludGVybmFsIHdhbGxldCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiByZWxpZXMgb24gYSBmdWxsIG5vZGUsIHNpZ25pZmljYW50bHkgZW5oYW5jZXMgdGhlIHByaXZhY3kuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvSGFyZHdhcmVXYWxsZXRJbnRlZ3JhdGlvbi8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIkhhcmR3YXJlIHdhbGxldCBpbnRlZ3JhdGlvbiIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIGFsbG93cyB0aGUgdXNhZ2Ugb2YgYSBoYXJkd2FyZSB3YWxsZXQgd2l0aCBhICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvRnVsbF9ub2RlIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiZnVsbCBub2RlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgYXZvaWRzIGxlYWtzIHRvIGEgdGhpcmQtcGFydHkgc2VydmVyLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZnJlZWxhbmNlcnMtYmlsbC1wYXkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2ZyZWVsYW5jZXJzLWJpbGwtcGF5IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRnJlZWxhbmNlcnMgJiBCaWxsIFBheSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJGcmVlbGFuY2VycyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjYW4gIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyZXF1ZXN0IildKSwKICAgICAgICAgIF92bS5fdigiIGZvciBwYXltZW50IGJ5IHNoYXJpbmcgYSAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9QYXltZW50UmVxdWVzdHMvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJQYXltZW50IFJlcXVlc3QiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuXG5Db250ZW50IGFuZCBhcHBlYXJhbmNlIG9mIHRoZSBwYXltZW50IHJlcXVlc3QgaXMgY3VzdG9taXphYmxlLlxuV2l0aCBvciB3aXRob3V0IGV4cGlyeSwgY3VzdG9tZXJzIGNhbiBwYXkgdGhlIHJlcXVlc3QgYXQgYW55IHRpbWUuXG5CVENQYXkgU2VydmVyIGF1dG9tYXRpY2FsbHkgdXBkYXRlcyB0aGUgZXhjaGFuZ2UgcmF0ZSB3aGVuIHRoZSBjdXN0b21lciBwYXlzIHRoZSBwYXltZW50IHJlcXVlc3Qgd2hlbiBpdCdzIGNvbnZlbmllbnQgZm9yIHRoZW0uXG5NZXJjaGFudHMgb3IgZnJlZWxhbmNlcnMgY2FuIHVzZSBwYXltZW50IHJlcXVlc3RzIGZvciBiaWxsIHBheSBzZXJ2aWNlcy5cblBheW1lbnQgcmVxdWVzdHMgY2FuIGV2ZW4gYmUgdXNlZCB0byBxdWlja2x5IHJlcXVlc3QgbW9uZXkgZnJvbSBmcmllbmRzLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIk1lcmNoYW50cyBjYW4gIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJwcm92aWRlIildKSwKICAgICAgICAgIF92bS5fdigiIHBheW1lbnQgYnkgc2hhcmluZyBhICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1B1bGxQYXltZW50cy8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIlB1bGwgUGF5bWVudCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gVGhpcyBpcyBhIGxvbmcgbGl2ZWQgcGF5bWVudCBvZmZlciB0aGF0IHRoZSBmcmVlbGFuY2VyIGNhbiBwdWxsIGZ1bmRzIGZyb20gYXQgdGhlaXIgY29udmVuaWVuY2UuIFRoZSBtZXJjaGFudCBjYW4gc3BlY2lmeSB0aGUgdG90YWwgYW1vdW50IGFuZCBhcHByb3ZlIHBhcnRpYWwgb3IgYSBmdWxsIHJlcXVlc3QgZm9yIHBheW1lbnQuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImxpZ2h0bmluZy1uZXR3b3JrLXBheW1lbnRzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsaWdodG5pbmctbmV0d29yay1wYXltZW50cyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIExpZ2h0bmluZyBOZXR3b3JrIHBheW1lbnRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQlRDUGF5IFNlcnZlciBvZmZlcnMgYSB2ZXJ5IGVhc3kgd2F5IHRvIGdldCBzdGFydGVkIHdpdGggcmVjZWl2aW5nIG9yIHNlbmRpbmcgcGF5bWVudHMgb24gdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTGlnaHRuaW5nIE5ldHdvcmsiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLlxuWW91IGNhbiB1c2UgYW5kIGV4cGVyaW1lbnQgd2l0aCB0aGlzIGlubm92YXRpdmUgc2Vjb25kLWxheWVyIHNvbHV0aW9uIGJ1aWxkIG9uIHRvcCBvZiBCaXRjb2luIGJ5ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvTGlnaHRuaW5nTmV0d29yay8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImZvbGxvd2luZyB0aGlzIGd1aWRlIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLlxuQm90aCBtZXJjaGFudHMgYW5kIGN1c3RvbWVycyBjYW4gdXNlIEJUQ1BheSB0byByZWNlaXZlIG9yIG1ha2UgcGF5bWVudHMgb2ZmLWNoYWluIHdpdGggaW5zdGFudCBjb25maXJtYXRpb25zIGFuZCByZWR1Y2VkIG5ldHdvcmsgZmVlcy4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY2hhcml0aWVzLWFuZC1jb250ZW50LWNyZWF0b3JzLWRvbmF0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY2hhcml0aWVzLWFuZC1jb250ZW50LWNyZWF0b3JzLWRvbmF0aW9ucyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoYXJpdGllcyBhbmQgQ29udGVudCBDcmVhdG9ycyAoRG9uYXRpb25zKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNoYXJpdGllcywgbm9uLXByb2ZpdHMsIGNvbnRlbnQgY3JlYXRvcnMsIGFuZCBvdGhlciBvcmdhbml6YXRpb25zIHRoYXQgd2FudCB0byBhY2NlcHQgY3J5cHRvY3VycmVuY3kgZG9uYXRpb25zIGluIGEgbW9yZSBwcml2YXRlIHdheSB0aGFuIHRoZSB0cmFkaXRpb25hbCBzaW5nbGUgYml0Y29pbiBhZGRyZXNzIG1ldGhvZCBjYW4gdXRpbGl6ZSB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvV2hhdHNOZXh0LyNjcmVhdGluZy10aGUtcGF5LWJ1dHRvbiIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJQYXkgQnV0dG9uIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9XaGF0c05leHQvI2NyZWF0aW5nLXRoZS1wb2ludC1vZi1zYWxlLWFwcCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJQT1MgYXBwIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIsIGFuZCAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9BcHBzLyNjcm93ZGZ1bmRpbmctYXBwIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDcm93ZGZ1bmRpbmcgYXBwIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgZm9yIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJCZW5lZml0cyBvZiB1c2luZyBCVENQYXkgZm9yIGFjY2VwdGluZyBkb25hdGlvbnM6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTYXZpbmcgbW9uZXkgKG5vIGZlZXMsIG5vIHN1YnNjcmlwdGlvbnMpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDdXR0aW5nIG91dCB0aGUgbWlkZGxlLW1hbiAoUGF5bWVudHMgZ28gZGlyZWN0bHkgdG8gdGhlaXIgd2FsbGV0KSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFbmhhbmNpbmcgcHJpdmFjeSBmb3IgdGhlbSBhbmQgdGhlaXIgZG9ub3JzIChubyBhZGRyZXNzIHJlLXVzZSwgbm8gSVAgbGVha3MgdG8gdGhpcmQgcGFydGllcykiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB0byBtZW50aW9uIHRoYXQgQlRDUGF5IFNldmVyIHByZXZlbnRzIGFkZHJlc3MgcmV1c2UsIGFzIG1hbnkgcGVvcGxlIGhhcyBiZWVuIHJldXNpbmcgYWRkcmVzcyBmb3IgZG9uYXRpb25zIGluIHRoZSBwYXN0LiBIZXJlIGlzIHdoeSB5b3UgU0hPVUxEIE5PVCByZXVzZSBCaXRjb2luIGFkZHJlc3M6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUHJpdmFjeTogcmV1c2luZyB0aGUgc2FtZSBhZGRyZXNzIGZvciBkb25hdGlvbnMgbm90IG9ubHkgbWFrZXMgaXQgaW5jcmVkaWJseSBlYXN5IHRvIGxpbmsgaXQgdG8geW91ciBpZGVudGl0eSwgaXQgYWxzbyBjb21wcm9taXNlcyB0aGUgcHJpdmFjeSBvZiB5b3VyIGRvbm9ycyBhbmQgZXZlcnkgcGVyc29uIHRoYXQgaW50ZXJhY3RzIHdpdGggeW91IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlY3VyaXR5OiBieSBjb21wcm9taXNpbmcgeW91ciBwcml2YWN5LCBhZGRyZXNzIHJldXNlIGluY3JlYXNlcyB5b3VyIGF0dGFjayBzdXJmYWNlLCBhcyBwZW9wbGUgdGhhdCB3YW50IHRvIHN0ZWFsIGZyb20geW91IG9yIGhhcm0geW91IHdvdWxkIGhhdmUgQSBMT1Qgb2YgaW5mb3JtYXRpb24gYWJvdXQgeW91IGFuZCB5b3VyIGRvbm9ycyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdIaWdoIGZlZXM6IGZlZXMgZm9yIGEgQml0Y29pbiB0cmFuc2FjdGlvbiBhcmUgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlICJzaXplIiBvZiBhIHRyYW5zYWN0aW9uICh3aGljaCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHRoZSBhbW91bnQgYmVpbmcgc2VudCkuIEJ5IHJldXNpbmcgYWRkcmVzc2VzLCB5b3UgYXJlIGJ1aWxkaW5nIGh1Z2UgdHJhbnNhY3Rpb25zIGludm9sdmluZyBtYW55IGlucHV0cywgdGhhdCB3aWxsIGNvc3QgeW91IGEgbG90IGluIGZlZXMgd2hlbiB5b3Ugd2FudCB0byBtb3ZlIHRoZW0nCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGFkZHJlc3MgcmV1c2Ugb24gdGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2VuLmJpdGNvaW4uaXQvd2lraS9BZGRyZXNzX3JldXNlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJCaXRjb2luIFdpa2kiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImxvY2FsLXBheW1lbnQtcHJvY2Vzc29yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsb2NhbC1wYXltZW50LXByb2Nlc3NvciIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIExvY2FsIFBheW1lbnQgUHJvY2Vzc29yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQWRtaW4gcnVubmluZyBhIEJUQ1BheSBTZXJ2ZXIgaW5zdGFuY2UsIGNhbiBlbmFibGUgcmVnaXN0cmF0aW9uIGZvciBvdGhlciB1c2VycyBhbmQgYmVjb21lIGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9UaGlyZFBhcnR5SG9zdGluZy8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoInRoaXJkLXBhcnR5IHBheW1lbnQgcHJvY2Vzc29yIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgZm9yIGZhbWlseSBtZW1iZXJzLCBmcmllbmRzIG9yIHRoZWlyIGxvY2FsIGNvbW11bml0eS4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgbWVhbnMgdGhhdCBhZG1pbiBhbGxvd3Mgb3RoZXIgcGVvcGxlIHRvIHJlZ2lzdGVyIGFuZCB1c2UgdGhlaXIgaW5zdGFuY2UsIHdoaWxlIHRoZSBwYXltZW50cyByZW1haW4gbm9uLWN1c3RvZGlhbC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlRha2UgYSBsb29rIGF0IHRoZSBsaXN0IG9mICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1RoaXJkUGFydHlIb3N0aW5nLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigidGhpcmQtcGFydHkgaG9zdHMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNyeXB0b2N1cnJlbmN5LWV4Y2hhbmdlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY3J5cHRvY3VycmVuY3ktZXhjaGFuZ2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ3J5cHRvY3VycmVuY3kgRXhjaGFuZ2VzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kaXJlY3RvcnkuYnRjcGF5c2VydmVyLm9yZyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigibnVtYmVyIG9mIG1lcmNoYW50cyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB1c2luZyBCVENQYXkgU2VydmVyIGdyb3dzIGVhY2ggZGF5LCBhbmQgY3J5cHRvY3VycmVuY3kgZXhjaGFuZ2VzIGNvdWxkIGJlbmVmaXQgZnJvbSBpdCBieSBkZXZlbG9waW5nIGludGVncmF0aW9uIHdpdGggQlRDUGF5IGFuZCBhbGxvdyBpbnN0YW50IGNvbnZlcnNpb24gb2YgY3J5cHRvY3VycmVuY3kgcGF5bWVudHMgaW50byBsb2NhbCBmaWF0IGN1cnJlbmNpZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQmVpbmcgYW4gb3Blbi1zb3VyY2VkIHByb2plY3QsIEJUQ1BheSBTZXJ2ZXIgZG9lc24ndCBoYXZlIHRoZSBwb3dlciB0byBpbXBvc2UgYW55dGhpbmcgb24gZXhjaGFuZ2VzLCBtZWFuaW5nIHRoYXQgYW55IG9mIHRoZW0gY291bGQgYnVpbGQgb24gdG9wIG9mIGl0LCByZWdhcmRsZXNzIG9mIHRoZWlyIHNpemUgb3IgdGhlIGNvdW50cnkgdGhleSBvcGVyYXRlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImhvc3RpbmctcHJvdmlkZXJzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3N0aW5nLXByb3ZpZGVycyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvc3RpbmcgUHJvdmlkZXJzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG9zdGluZyBwcm92aWRlcnMgY2FuIChhbmQgc29tZSBhbHJlYWR5IGRpZCkgY3JlYXRlIGVhc3kgMS1jbGljayBCVENQYXkgZGVwbG95bWVudCBzb2x1dGlvbnMgZm9yIHRoZWlyIGN1c3RvbWVycy4gV2l0aCB0aGUgZ3Jvd2luZyBpbnRlcmVzdCBpbiBCVENQYXkgU2VydmVyLCBob3N0aW5nIGNvbXBhbmllcyBjYW4gdGFwIGludG8gdGhpcyBzb3VyY2Ugb2YgbmV3IGN1c3RvbWVycyBhbmQgbWFrZSBtb25leSBieSBob3N0aW5nIGVhc2lseS1kZXBsb3lhYmxlIEJUQ1BheSBpbnN0YW5jZXMgZm9yIG1lcmNoYW50cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZXZlbG9wZXJzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZXZlbG9wZXJzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEZXZlbG9wZXJzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkJUQ1BheSBTZXJ2ZXIgY29tbXVuaXR5IGlzIGFtaWFibGUgYW5kIG9wZW4tbWluZGVkLiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRGV2ZWxvcGVycyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjYW4gbm90IG9ubHkgbGVhcm4gYSBsb3QgYW5kIGdldCB0aGVpciBuYW1lIG91dCBieSB3b3JraW5nIG9uIGFuIG9wZW4tc291cmNlIHByb2plY3QsIGJ1dCBhbHNvIHBhcnRpY2lwYXRlIGluIHRyYW5zZm9ybWluZyB0aGUgcGF5bWVudCBwcm9jZXNzaW5nIGJ1c2luZXNzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlc2UgYXJlIHNvbWUgb2YgdGhlIG1hbnkgd2F5cyBpbiB3aGljaCB5b3UgY2FuIHVzZSBCVENQYXkuIFVubGVhc2ggeW91ciBjcmVhdGl2aXR5IGFuZCBmZWVsIGZyZWUgdG8gYnVpbGQgeW91ciBvd24gc29sdXRpb25zIHRvIHNvbHZlIHByb2JsZW1zLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}