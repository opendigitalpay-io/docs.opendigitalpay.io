{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Docker/pihole.md?vue&type=template&id=42ab090a&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Docker/pihole.md","mtime":1617331798559},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJwaS1ob2xlLXN1cHBvcnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3BpLWhvbGUtc3VwcG9ydCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUGktSG9sZSBzdXBwb3J0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9waS1ob2xlLm5ldC8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIlBpLUhvbGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgYSBibGFjayBob2xlIGZvciBpbnRlcm5ldCBhZHZlcnRpc2VtZW50LlxuSXQgd29ya3MgYXMgYSBETlMgc2VydmVyIHdoaWNoIGJsYWNrbGlzdCBkb21haW5zIHRpZWQgdG8gYWR2ZXJ0aXNlbWVudC4gSWYgeW91IHVzZSBpdCBhcyB5b3VyIG1haW4gRE5TIHNlcnZlciBhbmQgaXQgZGV0ZWN0cyB5b3VyIHF1ZXJ5IGlzIHRyeWluZyB0byByZXNvbHZlIGEgZG9tYWluIGJlbG9uZ2luZyB0byBhbiBhZHZlcnRpc2VtZW50IGNvbXBhbnksIGl0IHdpbGwgcmVzb2x2ZSB0aGUgZG9tYWluIHRvIElQICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMC4wLjAuMCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgcHJldmVudGluZyB0aGUgYWR2ZXJ0aXNlbWVudCB0byBsb2FkIG9uIGFueSBjb21wdXRlciB1c2luZyB0aGlzIEROUyBzZXJ2ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5vdGUgdGhhdCBvdXIgcGktaG9sZSBpbnRlZ3JhdGlvbiBpcyBtZWFudCB0byBiZSB1c2VkIGluIGEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImxvY2FsIG5ldHdvcmsiKV0pLAogICAgICAgIF92bS5fdigiLiBQbGVhc2UgZG8gbm90IHRyeSB0byB1c2UgdGhpcyBvcHRpb24gb24gYSBWUFMuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLXVzZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaG93LXRvLXVzZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIHVzZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJMZXQncyBpbWFnaW5lIHRoZSBsb2NhbCBJUCBvZiB5b3VyIEJUQ1BheSBTZXJ2ZXIgaXMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIxOTIuMTY4LjEuMiIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ29ubmVjdCBhcyByb290IHRvIHlvdXIgc2VydmVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGQgcGlob2xlIGFzIGFuIG9wdGlvbiB0byB5b3VyIGRvY2tlciBkZXBsb3ltZW50IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtYmFzaCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS1iYXNoIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gYXNzaWduLWxlZnQgdmFyaWFibGUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCVENQQVlHRU5fQURESVRJT05BTF9GUkFHTUVOVFMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gc3RyaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoJyInKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHZhcmlhYmxlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiJEJUQ1BBWUdFTl9BRERJVElPTkFMX0ZSQUdNRU5UUyIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCc7b3B0LWFkZC1waWhvbGUiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGJ1aWx0aW4gY2xhc3MtbmFtZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIi4iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgYnRjcGF5LXNldHVwLnNoIC1pXG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoIm9sIiwgeyBhdHRyczogeyBzdGFydDogIjMiIH0gfSwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIklmIHlvdXIgc2VydmVyIGhhcyBhIGZpcmV3YWxsLCBtYWtlIHN1cmUgaXQgYWxsb3cgaW5jb21pbmcgdHJhZmZpYyB0byBwb3J0ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjUzIChVRFApIildKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDb25maWd1cmUgeW91ciBob21lIHJvdXRlciBESENQIHNlcnZlciB0byB1c2UgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjE5Mi4xNjguMS4yIildKSwKICAgICAgICAgIF92bS5fdigiIGFzIHByaW1hcnkgRE5TIHNlcnZlci4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZyb20gbm93IGV2ZXJ5dGltZSBhIGRldmljZSB3aWxsIGNvbm5lY3QgdG8geW91ciBsb2NhbCBuZXR3b3JrLCB0aGV5IHdpbGwgYXV0b21hdGljYWxseSB1c2UgcGktaG9sZSBhcyBhIEROUyBzZXJ2ZXIuIEFkdmVydGlzZW1lbnRzIHdpbGwgZ28gdG8gYSBibGFjayBob2xlIGZvciBhbGwgZGV2aWNlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ1c2luZy10aGUtZGFzaGJvYXJkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN1c2luZy10aGUtZGFzaGJvYXJkIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVXNpbmcgdGhlIGRhc2hib2FyZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlBpLUhvbGUgY29tZXMgd2l0aCBhIHZlcnkgbmljZSBhZG1pbiBkYXNoYm9hcmQgdG8gbW9uaXRvciBpdHMgYWN0aXZpdHkuXG5JdCBpcyBkaXNhYmxlZCBieSBkZWZhdWx0LiBUbyBlbmFibGUgaXQsIHlvdSBuZWVkIHRvIGNvbmZpZ3VyZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBJSE9MRV9TRVJWRVJJUCIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gdGhlIElQIG9mIHlvdXIgc2VydmVyOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1iYXNoIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWJhc2giIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBhc3NpZ24tbGVmdCB2YXJpYWJsZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlBJSE9MRV9TRVJWRVJJUCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIj0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBzdHJpbmciIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdignIjE5Mi4xNjguMS4yIicpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIuIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIGJ0Y3BheS1zZXR1cC5zaCAtaVxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3VyIGRldmljZSBpcyB1c2luZyBwaS1ob2xlIGFzIGEgRE5TIHNlcnZlciwgeW91IHNob3VsZCBub3cgYmUgYWJsZSB0byBicm93c2UgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJodHRwOi8vcGkuaG9sZS9hZG1pbiIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gY29ubmVjdCB0byB5b3VyIGRhc2hib2FyZC4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiWW91IGNhbiBmaW5kIHRoZSBhZG1pbiBwYXNzd29yZCBpbiB0aGUgbG9ncyBvZiBwaWhvbGU6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJkb2NrZXIgbG9ncyBwaWhvbGUgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJncmVwIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIHJhbmRvbVxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB0aGUgcGFzc3dvcmQgZG9lcyBub3Qgd29yaywgeW91IGNhbiB0cnkgdG8gcmVzZXQgdGhlIHBhc3N3b3JkOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1iYXNoIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWJhc2giIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwaWhvbGUuc2ggLWEgLXBcbmRvY2tlciByZXN0YXJ0IHBpaG9sZVxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZW4gcnVubmluZyBhZ2FpbiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJkb2NrZXIgbG9ncyBwaWhvbGUgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJncmVwIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIHJhbmRvbVxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}