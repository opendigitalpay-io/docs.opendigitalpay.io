{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/ElectrumPersonalServer.md?vue&type=template&id=4b8faee9&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/ElectrumPersonalServer.md","mtime":1617331587399},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PGgxIGlkPSJlbGVjdHJ1bS1wZXJzb25hbC1zZXJ2ZXItZXBzLWludGVncmF0aW9uIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2VsZWN0cnVtLXBlcnNvbmFsLXNlcnZlci1lcHMtaW50ZWdyYXRpb24iPiM8L2E+IEVsZWN0cnVtIFBlcnNvbmFsIFNlcnZlciAoRVBTKSBpbnRlZ3JhdGlvbjwvaDE+CjxwPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpcy1iZWxjaGVyL2VsZWN0cnVtLXBlcnNvbmFsLXNlcnZlciIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+RWxlY3RydW0gUGVyc29uYWwgU2VydmVyIG9yIEVQUzxPdXRib3VuZExpbmsvPjwvYT4gaXMgYSBwZXJzb25hbCB2ZXJzaW9uIG9mIHB1YmxpYyBFbGVjdHJ1bSBzZXJ2ZXJzIGxpa2UgPFJvdXRlckxpbmsgdG89Ii9FbGVjdHJ1bVgvIj5FbGVjdHJ1bVg8L1JvdXRlckxpbms+LjwvcD4KPHA+PHN0cm9uZz5FUFMgY2FuIGJlIGludGVncmF0ZWQgaW50byBCVENQYXkgU2VydmVyPC9zdHJvbmc+IHVzaW5nIHRoZSBvcHRpb25hbCBkb2NrZXIgZnJhZ21lbnQgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2J0Y3BheXNlcnZlci9idGNwYXlzZXJ2ZXItZG9ja2VyL2Jsb2IvbWFzdGVyL2RvY2tlci1jb21wb3NlLWdlbmVyYXRvci9kb2NrZXItZnJhZ21lbnRzL29wdC1hZGQtZWxlY3RydW0tcHMueW1sIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIj5vcHQtYWRkLWVsZWN0cnVtLXBzLnltbDxPdXRib3VuZExpbmsvPjwvYT4uIFVzZSBFUFMgd2hlbiB5b3Ugd2FudCB0byB1c2UgeW91ciBvd24gZnVsbCBub2RlIChpbmNsdWRlZCBpbiBCVENQYXkgU2VydmVyKSB0byB2ZXJpZnkgeW91ciBvd24gdHJhbnNhY3Rpb25zIHByaXZhdGVseSB3aGVuIHVzaW5nIEVsZWN0cnVtIFdhbGxldC48L3A+CjxwPlRoZSBiaWdnZXN0IGRpZmZlcmVuY2Ugd2l0aCBwdWJsaWMgRWxlY3RydW0gc2VydmVycyAoZWcuIEVsZWN0cnVtWCksIGlzIHRoYXQgPHN0cm9uZz5FUFMgaXMgZm9yIG1vbml0b3Jpbmcgb25seSB5b3VyIG93biB3YWxsZXQocyk8L3N0cm9uZz4uICBUaGUgJnF1b3Q7WFBVQiZxdW90OyAoZXh0ZW5kZWQgcHVibGljIGtleSkgb2YgdGhlIHdhbGxldCB5b3UgdXNlIGluIEVsZWN0cnVtIG11c3QgYmUgc2hhcmVkIHdpdGggRVBTIGluIG9yZGVyIGZvciBpdCB0byBmdW5jdGlvbiBhbGwgYWxsLiBPdGhlciB0aGFuIHRoaXMsIGl0IGZ1bmN0aW9ucyAoZnJvbSBhbiBlbmQgdXNlciBwZXJzcGVjdGl2ZSkgaW4gdGhlIHNhbWUgd2F5IGFzIEVsZWN0cnVtWCBldGMuICBJdCBpcyA8c3Ryb25nPmVhc3kgdG8gaW50ZWdyYXRlIGludG8gQlRDUGF5PC9zdHJvbmc+IGp1c3QgZm9sbG93IHRoZSBpbnN0cnVjdGlvbnMgYmVsb3cuPC9wPgo8cD5FUFMgZG9lcyBub3QgcmVxdWlyZSA8Y29kZT50eGluZGV4PC9jb2RlPiBhbmQgd29ya3Mgb24gYSBwcnVuZWQgbm9kZS48L3A+CjxoMiBpZD0iYWJvdXQtdG9yLXN1cHBvcnQiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjYWJvdXQtdG9yLXN1cHBvcnQiPiM8L2E+IEFib3V0IFRvciBzdXBwb3J0PC9oMj4KPHA+QnkgZGVmYXVsdCB5b3VyIEVQUyBpcyBhY2Nlc3NpYmxlIG92ZXIgVG9yLiBZb3UgY2FuIHJ1biB0aGUgZm9sbG93aW5nIGNvbW1hbmQgbGluZSB2aWEgU1NIIG9uIHlvdXIgc2VydmVyIHRvIGdldCB5b3VyIFRvciBhZGRyZXNzOjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtYmFzaCBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlIHYtcHJlIGNsYXNzPSJsYW5ndWFnZS1iYXNoIj48Y29kZT48c3BhbiBjbGFzcz0idG9rZW4gZnVuY3Rpb24iPmNhdDwvc3Bhbj4gL3Zhci9saWIvZG9ja2VyL3ZvbHVtZXMvZ2VuZXJhdGVkX3Rvcl9zZXJ2aWNlc2Rpci9fZGF0YS9idGMtZWxlY3RydW0tcHMvaG9zdG5hbWUKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+WW91IGNhbiBjYW4gYWxzbyBnbyB0byB5b3VyIEJUQ1BheSBTZXJ2ZXIgJmd0OyBTZXJ2ZXIgU2V0dGluZ3MgJmd0OyBTZXJ2aWNlcyBhbmQgZmluZCB0aGUgdG9yIGxpbmsgaW4gPGNvZGU+T3RoZXIgVE9SIGhpZGRlbiBzZXJ2aWNlczwvY29kZT4uPC9wPgo8cD5PbiB0aGUgRWxlY3RydW0gd2FsbGV0IG1hY2hpbmUsIGlmIHlvdSB3YW50IHRvIGNvbm5lY3QgdG8geW91ciBzZXJ2ZXIgdmlhIFRvciwgd2UgYXNzdW1lIGluIHRoaXMgdHV0b3JpYWwgdGhhdCB5b3UgcnVuIHRoZSBUb3IgQnJvd3NlciBsb2NhbGx5LCBhbmQgdGh1cyB5b3Ugd2lsbCB1c2UgU09DS1M1IHBvcnQgPGNvZGU+OTE1MDwvY29kZT4uIElmIHlvdSBydW4gVG9yIHRocm91Z2ggdGhlIGNvbW1hbmQgbGluZSBpbnN0ZWFkLCB0aGUgbG9jYWwgU09DS1M1IHBvcnQgaXMgPGNvZGU+OTA1MDwvY29kZT4uPC9wPgo8aDIgaWQ9Imhvdy10by1lbmFibGUtZWxlY3RydW0tcGVyc29uYWwtc2VydmVyLWVwcy1pbi1idGNwYXkiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjaG93LXRvLWVuYWJsZS1lbGVjdHJ1bS1wZXJzb25hbC1zZXJ2ZXItZXBzLWluLWJ0Y3BheSI+IzwvYT4gSG93IHRvIGVuYWJsZSBFbGVjdHJ1bSBQZXJzb25hbCBTZXJ2ZXIgKEVQUykgaW4gQlRDUGF5OjwvaDI+CjxvbD4KPGxpPgo8cD48c3Ryb25nPklmIHlvdSBkbyBub3QgdXNlIFRvcjwvc3Ryb25nPiwgRVBTIGlzIGFjY2Vzc2libGUgZm9yIEVsZWN0cnVtIFdhbGxldHMgdmlhIFRDUCBwb3J0IDUwMDAyLiBZb3UgbmVlZCB0byBvcGVuIHRoaXMgcG9ydCB1cCBmdWxseSBhdCBsZWFzdCB0byBiZSBhdmFpbGFibGUgd2l0aGluIHlvdXIgb3duIG5ldHdvcmsgdG8gYW55IFBDIG9yIEFuZHJvaWQgZGV2aWNlIHJ1bm5pbmcgRWxlY3RydW0gV2FsbGV0LCBhbmQgdHVybiBvbiBwb3J0IGZvcndhcmRpbmcuIElmIHlvdSB1c2UgVG9yLCB5b3UgY2FuIHNraXAgdGhpcyBzdGVwLjwvcD4KPC9saT4KPGxpPgo8cD5BcyBFUFMgaXMgZm9yIGEgc2luZ2xlIHdhbGxldCAoc2luZ2xlIHVzZXIpLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBYUFVCL1lQVUIvWlBVQiBvZiB5b3VyIHdhbGxldCBhcyBhbiBlbnZpcm9ubWVudCB2YXJhYmxlIGJlZm9yZSB5b3UgZW5hYmxlIHRoZSBFUFMgZG9ja2VyLWZyYWdtZW50LiAgSW4gRWxlY3RydW0gV2FsbGV0IGdvIHRvIHRoZSAmcXVvdDtXYWxsZXQmcXVvdDsgbWVudSB0aGVuIHNlbGVjdCAmcXVvdDtJbmZvcm1hdGlvbiZxdW90OyB0byBjb3B5IGFuZCBwYXN0ZSB5b3Vycy4gU2V0IEVOViB2YXJpYWJsZSBmb3IgeW91ciB3YWxsZXQgWFBVQiBhbmQgZW5hYmxlIHRoZSBEb2NrZXIgQWRkaXRpb25hbCBGcmFnbWVudCBvbiB5b3VyIEJUQ1BheSBub2RlIGJ5IHJ1bm5pbmcgdGhlIGZvbGxvd2luZyBzdGVwczo8L3A+CjwvbGk+Cjwvb2w+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtYmFzaCI+PGNvZGU+PHNwYW4gY2xhc3M9InRva2VuIGJ1aWx0aW4gY2xhc3MtbmFtZSI+ZXhwb3J0PC9zcGFuPiA8c3BhbiBjbGFzcz0idG9rZW4gYXNzaWduLWxlZnQgdmFyaWFibGUiPkJUQ1BBWUdFTl9BRERJVElPTkFMX0ZSQUdNRU5UUzwvc3Bhbj48c3BhbiBjbGFzcz0idG9rZW4gb3BlcmF0b3IiPj08L3NwYW4+PHNwYW4gY2xhc3M9InRva2VuIHN0cmluZyI+IjxzcGFuIGNsYXNzPSJ0b2tlbiB2YXJpYWJsZSI+JEJUQ1BBWUdFTl9BRERJVElPTkFMX0ZSQUdNRU5UUzwvc3Bhbj47b3B0LWFkZC1lbGVjdHJ1bS1wcyI8L3NwYW4+CjxzcGFuIGNsYXNzPSJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiPmV4cG9ydDwvc3Bhbj4gPHNwYW4gY2xhc3M9InRva2VuIGFzc2lnbi1sZWZ0IHZhcmlhYmxlIj5FUFNfWFBVQjwvc3Bhbj48c3BhbiBjbGFzcz0idG9rZW4gb3BlcmF0b3IiPj08L3NwYW4+PHNwYW4gY2xhc3M9InRva2VuIHN0cmluZyI+IlhQVUJfQUREX1lPVVJfWFBVQl9ZUFVCX09SX1pQVUJfSEVSRSI8L3NwYW4+CjxzcGFuIGNsYXNzPSJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiPi48L3NwYW4+IGJ0Y3BheS1zZXR1cC5zaCAtaQo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48b2wgc3RhcnQ9IjMiPgo8bGk+V0FJVCBmb3IgeW91ciBCaXRjb2luIGZ1bGwgbm9kZSBhbmQgRVBTIHNlcnZlciB0byBmdWxseSBzeW5jOgpZb3UgY2FuIGNoZWNrIHRoZSBzdGF0dXMgb2YgYml0Y29pbiBjb3JlIHN5bmMgYnkgZ29pbmcgdG8geW91ciBkb21haW4gZm9yIEJUQ1BheSBzZXJ2ZXIsIGFuZCBpdCB3aWxsIHNob3cgeW91IG9uIHRoZSBmcm9udCBwYWdlLiAgT3IsIHlvdSBjYW4gY2hlY2sgZnJvbSB0aGUgY29tbWFuZCBsaW5lIGFzIHdlbGwsIHVzaW5nIHRoZXNlIGNvbW1hbmRzOgo8Y29kZT5kb2NrZXIgbG9ncyBidGNwYXlzZXJ2ZXJfYml0Y29pbmQ8L2NvZGU+IC0gdGhpcyB3aWxsIHNob3cgeW91IHRoZSBiaXRjb2luIGNvcmUgYmxvY2tjaGFpbiBzeW5jIHN0YXR1cyAoYW5kIEFMTCBvdGhlciBpbmZvIGFib3V0IHlvdXIgbm9kZSwgaW5jbHVkaW5nIGFueSBlcnJvcnMpCjxjb2RlPmRvY2tlciBsb2dzIGdlbmVyYXRlZF9lbGVjdHJ1bV9wc18xPC9jb2RlPiAtIHRoaXMgd2lsbCBzaG93IHlvdSB0aGUgRVBTIHN5bmMgc3RhdHVzLiAgTm90ZTogRVBTIHdpbGwgTk9UIHN0YXJ0IHN5bmNpbmcgdW50aWwgYml0Y29pbiBmdWxsIG5vZGUgaGFzIGZpbmlzaGVkIHN5bmNpbmcsIHlvdSB3aWxsIHNlZSBlcnJvcnMgdW50aWwgdGhhdCBpcyBmaW5pc2hlZCBhbmQgdGhlc2UgY2FuIGJlIGlnbm9yZWQuPC9saT4KPC9vbD4KPHA+T25jZSBhbGwgc3luY2luZyBmb3IgYm90aCBiaXRjb2luIGFuZCBFUFMgaGF2ZSBmaW5pc2hlZCBzeW5jaGluZywgeW91IGNhbiBwcm9jZWVkIHRvIHRoZSBuZXh0IHN0ZXAuICAoTm90ZTogRWxlY3RydW0gd2FsbGV0cyB3aWxsIG5vdCBjb25uZWN0IHRvIGFuIEVQUyBzZXJ2ZXIgdGhhdCBoYXMgbm90IGZpbmlzaGVkIHN5bmNoaW5nKTwvcD4KPGgyIGlkPSJob3ctdG8tY29ubmVjdC1lbGVjdHJ1bS13YWxsZXQtdG8tZXBzIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2hvdy10by1jb25uZWN0LWVsZWN0cnVtLXdhbGxldC10by1lcHMiPiM8L2E+IEhvdyB0byBjb25uZWN0IEVsZWN0cnVtIFdhbGxldCB0byBFUFM8L2gyPgo8cD5UaGVyZSBhcmUgdGhyZWUgd2F5cyB0byB1c2UgeW91ciBzZXJ2ZXIgZnJvbSBFbGVjdHJ1bSBXYWxsZXQ6PC9wPgo8b2w+CjxsaT5CeSBlZGl0aW5nIHRoZSBjb25maWd1cmF0aW9uIGZpbGU8L2xpPgo8bGk+QnkgcnVubmluZyBFbGVjdHJ1bSBieSB0aGUgY29tbWFuZCBsaW5lPC9saT4KPGxpPlZpYSB0aGUgdXNlciBpbnRlcmZhY2UgKG5vdCByZWNvbW1lbmRlZCwgYmFkIHByaXZhY3kpPC9saT4KPC9vbD4KPGg0IGlkPSJvcHRpb24tMS1jb25uZWN0LXRvLXlvdXItZXBzLXNlcnZlci1ieS1kaXJlY3RseS1lZGl0aW5nLWVsZWN0cnVtLXdhbGxldC1jb25maWctZmlsZS1iZWZvcmUtZXZlbi1vcGVuaW5nLXRoZS1lbGVjdHJ1bS13YWxsZXQtZ3VpLXJlY29tbWVuZGVkLWZvci1mdWxsLXByaXZhY3kiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjb3B0aW9uLTEtY29ubmVjdC10by15b3VyLWVwcy1zZXJ2ZXItYnktZGlyZWN0bHktZWRpdGluZy1lbGVjdHJ1bS13YWxsZXQtY29uZmlnLWZpbGUtYmVmb3JlLWV2ZW4tb3BlbmluZy10aGUtZWxlY3RydW0td2FsbGV0LWd1aS1yZWNvbW1lbmRlZC1mb3ItZnVsbC1wcml2YWN5Ij4jPC9hPiBPcHRpb24gMTogQ29ubmVjdCB0byB5b3VyIEVQUyBTZXJ2ZXIgYnkgZGlyZWN0bHkgZWRpdGluZyBFbGVjdHJ1bSBXYWxsZXQgY29uZmlnIGZpbGUgKGJlZm9yZSBldmVuIG9wZW5pbmcgdGhlIEVsZWN0cnVtIHdhbGxldCBHVUkgLSByZWNvbW1lbmRlZCBmb3IgZnVsbCBwcml2YWN5KTo8L2g0Pgo8cD5Zb3UgY2FuIDxzdHJvbmc+c2V0dXAgeW91ciBFbGVjdHJ1bSBzZXJ2ZXI8L3N0cm9uZz4gYnkgZWRpdGluZyB0aGUgY29uZmlndXJhdGlvbiBmaWxlLjwvcD4KPHA+SW4gdGhlIDxhIGhyZWY9Imh0dHBzOi8vZWxlY3RydW0ucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2ZhcS5odG1sI3doZXJlLWlzLW15LXdhbGxldC1maWxlLWxvY2F0ZWQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPkVsZWN0cnVtIFdhbGxldCBmb2xkZXI8T3V0Ym91bmRMaW5rLz48L2E+LCBvcGVuIGFuZCBlZGl0IHRoZSA8Y29kZT5jb25maWc8L2NvZGU+IGZpbGUgbGlrZSB0aGlzOjwvcD4KPG9sPgo8bGk+CjxwPkZpbmQgbGluZTogPGNvZGU+JnF1b3Q7YXV0b19jb25uZWN0JnF1b3Q7OiB0cnVlLDwvY29kZT4gYW5kIHN3aXRjaCBpdCB0bzogPGNvZGU+JnF1b3Q7YXV0b19jb25uZWN0JnF1b3Q7OiBmYWxzZSw8L2NvZGU+IC0gdGhpcyB3aWxsIHByZXZlbnQgeW91ciBFbGVjdHJ1bSBXYWxsZXQgZnJvbSBhdXRvLWNvbm5lY3RpbmcgdG8gb3RoZXIgM3JkIHBhcnR5IEVsZWN0cnVtIFNlcnZlcnMgYXQgbGF1bmNoIHRpbWUgKHRvIG9idGFpbiBibG9jayBoZWFkZXJzIGFuZCB0cmFuc2FjdGlvbiBpbmZvcm1hdGlvbikuPC9wPgo8L2xpPgo8bGk+CjxwPkZpbmQgbGluZTogPGNvZGU+JnF1b3Q7b25lc2VydmVyJnF1b3Q7OiBmYWxzZSw8L2NvZGU+IGFuZCBzd2l0Y2ggaXQgdG86IDxjb2RlPiZxdW90O29uZXNlcnZlciZxdW90OzogdHJ1ZSw8L2NvZGU+IC0gZW5zdXJlcyB0aGF0IGFsbCBkYXRhIGlzIG9idGFpbmVkIGZyb20ganVzdCBvbmUgc2VydmVyLjwvcD4KPC9saT4KPGxpPgo8cD5GaW5kIG9yIGFkZCBsaW5lOiA8Y29kZT4mcXVvdDtzZXJ2ZXImcXVvdDs6ICZxdW90O3lvdXJzZXJ2ZXI6NTAwMDI6cyZxdW90Oyw8L2NvZGU+YW5kIHN3aXRjaCBpdCB0byB5b3VyIG93biBFUFMgU2VydmVyJ3MgSVAgYWRkcmVzcywgaW4gdGhlIGV4YW1wbGUgYWJvdmUgdGhpcyB3b3VsZCBiZTogPGNvZGU+JnF1b3Q7c2VydmVyJnF1b3Q7OiAmcXVvdDsxOTIuMTY4LjEuMzo1MDAwMjpzJnF1b3Q7LDwvY29kZT4tIGhhcmQgY29kZSB5b3VyIElQIGFkZHJlc3MgYXMgdGhlIGRlZmF1bHQgdXBvbiBvcGVuaW5nIHRoZSBXYWxsZXQuPC9wPgo8L2xpPgo8L29sPgo8cD5UaGVzZSAzIHN0ZXBzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIGZvciBmdWxsIHByaXZhY3kgYnkgbG9ja2luZyBkb3duIEVsZWN0cnVtIFdhbGxldCB0byBvbmUgc2luZ2xlIGNvbm5lY3Rpb24gd2l0aCB5b3VyIHByaXZhdGUgc2VydmVyIG9ubHkgKDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpcy1iZWxjaGVyL2VsZWN0cnVtLXBlcnNvbmFsLXNlcnZlciNob3ctdG8iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPlJlZmVyZW5jZTxPdXRib3VuZExpbmsvPjwvYT4pLjwvcD4KPG9sIHN0YXJ0PSI0Ij4KPGxpPig8c3Ryb25nPklmIHlvdSB1c2UgVG9yPC9zdHJvbmc+KSBJZiB5b3UgcnVuIFRvciBCcm93c2VyLCB5b3UgY2FuIHVzZSBpdCBhcyBTT0NLNSBwcm94eSBieSBhZGRpbmcgPGNvZGU+JnF1b3Q7cHJveHkmcXVvdDs6ICZxdW90O3NvY2tzNToxMjcuMC4wLjE6OTE1MDo6JnF1b3Q7LDwvY29kZT4gdG8gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS48L2xpPgo8L29sPgo8aDQgaWQ9Im9wdGlvbi0zLWNvbm5lY3QtdG8teW91ci1lcHMtc2VydmVyLWJ5LWNvbW1hbmQtbGluZSI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNvcHRpb24tMy1jb25uZWN0LXRvLXlvdXItZXBzLXNlcnZlci1ieS1jb21tYW5kLWxpbmUiPiM8L2E+IE9wdGlvbiAzOiBDb25uZWN0IHRvIHlvdXIgRVBTIFNlcnZlciBieSBjb21tYW5kIGxpbmU8L2g0Pgo8cD5Zb3UgY2FuIHJ1biBlbGVjdHJ1bSB2aWEgY29tbWFuZCBsaW5lIDxjb2RlPmVsZWN0cnVtIC0tb25lc2VydmVyIC0tc2VydmVyIHlvdXJzZXJ2ZXI6NTAwMDI6czwvY29kZT4uPC9wPgo8cD5JZiB5b3UgdXNlIFRvciwgYWRkIDxjb2RlPi1wIHNvY2tzNTpsb2NhbGhvc3Q6OTE1MDwvY29kZT4uPC9wPgo8aDQgaWQ9Im9wdGlvbi00LWNvbm5lY3QtdG8teW91ci1lcHMtc2VydmVyLWZyb20tZWxlY3RydW0td2FsbGV0LWd1aS1ub3QtcmVjb21tZW5kZWQtYXMtdGhpcy13aWxsLW1vbWVudGFyaWx5LWNvbm5lY3RzLXdpdGgtb3RoZXItcmFuZG9tLXB1YmxpYy1lbGVjdHJ1bS1zZXJ2ZXJzLWlmLXlvdS1hcmUtb25saW5lIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI29wdGlvbi00LWNvbm5lY3QtdG8teW91ci1lcHMtc2VydmVyLWZyb20tZWxlY3RydW0td2FsbGV0LWd1aS1ub3QtcmVjb21tZW5kZWQtYXMtdGhpcy13aWxsLW1vbWVudGFyaWx5LWNvbm5lY3RzLXdpdGgtb3RoZXItcmFuZG9tLXB1YmxpYy1lbGVjdHJ1bS1zZXJ2ZXJzLWlmLXlvdS1hcmUtb25saW5lIj4jPC9hPiBPcHRpb24gNDogQ29ubmVjdCB0byB5b3VyIEVQUyBTZXJ2ZXIgZnJvbSBFbGVjdHJ1bSBXYWxsZXQgR1VJIChub3QgcmVjb21tZW5kZWQgYXMgdGhpcyB3aWxsIG1vbWVudGFyaWx5IGNvbm5lY3RzIHdpdGggb3RoZXIgcmFuZG9tIHB1YmxpYyBFbGVjdHJ1bSBzZXJ2ZXJzIGlmIHlvdSBhcmUgb25saW5lKTo8L2g0Pgo8b2w+CjxsaT5PcGVuIEVsZWN0cnVtIFdhbGxldC4gIFdoZW4geW91IGNsaWNrIHRoZSB0cmFmZmljIGxpZ2h0IChncmVlbiBvciByZWQpIGF0IHRoZSBib3R0b20gb2YgeW91ciBFbGVjdHJ1bSBXYWxsZXQsIHlvdSB3aWxsIHNlZSBhIHNjcmVlbiB3aXRoIGEgbGlzdCBvZiBhbGwgdGhlIGF2YWlsYWJsZSBFbGVjdHJ1bSBzZXJ2ZXJzIHRoYXQgeW91ciB3YWxsZXQgY2FuIGNvbm5lY3QgdG8sIG5vcm1hbGx5IHdpdGggdGhlIDxjb2RlPlNlbGVjdCBTZXJ2ZXIgQXV0b21hdGljYWxseTwvY29kZT4gYm94IGFscmVhZHkgY2hlY2tlZDo8L2xpPgo8L29sPgo8ZmlndXJlPjxpbWcgc3JjPSJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzg4NTA3LzY4NDM3NTIxLThhNWViNTgwLTAxYzEtMTFlYS05ZWNlLTA2NjYzNTNhNjc0Mi5wbmciIGFsdD0iRWxlY3RydW1XYWxsZXRTZXJ2ZXJMaXN0IiB0aXRsZT0iRWxlY3RydW0gV2FsbGV0IFNlcnZlciBMaXN0Ij48L2ZpZ3VyZT4KPG9sIHN0YXJ0PSIyIj4KPGxpPk5vdyBpcyB0aGUgdGltZSB0byBVTkNIRUNLIHRoYXQgPGNvZGU+U2VsZWN0IFNlcnZlciBBdXRvbWF0aWNhbGx5PC9jb2RlPiBzZXR0aW5nLCB3aGljaCB3aWxsIGVuYWJsZSB5b3UgdG8gZW50ZXIgdGhlIElQIGFkZHJlc3Mgb3IgZG9tYWluIG9yIGhvc3RuYW1lIG9mIHlvdXIgRVBTIFNlcnZlci4gIEluIHRoZSBjYXNlIGJlbG93LCB0aGUgRVBTIHNlcnZlciBpcyBvbiB0aGUgbG9jYWwgbmV0d29yayBhdCA8Y29kZT4xOTIuMTY4LjEuMzwvY29kZT4gc28gd2UgZW50ZXIgdGhhdCBtYW51YWxseSAobGVhdmUgcG9ydCBhcyA1MDAwMikgYW5kIHByZXNzIDxjb2RlPmNsb3NlPC9jb2RlPi48L2xpPgo8L29sPgo8ZmlndXJlPjxpbWcgc3JjPSJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzg4NTA3LzY4NDk2MzIwLTRlMjc2NTgwLTAyNTItMTFlYS04Y2FmLWZhY2M4YTI0NmQ3MC5wbmciIGFsdD0iRW50ZXJFbGVjdHJ1bVNlcnZlcklQIiB0aXRsZT0iRWxlY3RydW0gV2FsbGV0IFNlcnZlciBJUCI+PC9maWd1cmU+CjxvbCBzdGFydD0iNCI+CjxsaT4KPHA+KDxzdHJvbmc+SWYgeW91IHVzZSBUb3I8L3N0cm9uZz4pIEdvIHRvIHByb3h5LCB0aGVuIGNsaWNrIG9uIDxjb2RlPlVzZSBUb3IgUHJveHkgYXQgcG9ydCA5MTUwPC9jb2RlPi48L3A+CjwvbGk+CjxsaT4KPHA+SWYgYWxsIG9mIHRoZSBhYm92ZSB3b3JrZWQgd2VsbCwgYW5kIHlvdXIgbm9kZSBpcyBoZWFsdGh5IGFuZCBzeW5jaGVkLCB5b3Ugd2lsbCBnZXQgYSBncmVlbiB0cmFmZmljIGxpZ2h0IGRvd24gdGhlIGJvdHRvbSByaWdodCBvZiB0aGUgd2FsbGV0IHNjcmVlbiAtIHRoYXQgbWVhbnMgc3VjY2VzcyE8L3A+CjwvbGk+Cjwvb2w+CjxoMyBpZD0icmVmbGVjdGlvbi1vbi13aGF0LWhhcy1iZWVuLWFjaGlldmVkIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3JlZmxlY3Rpb24tb24td2hhdC1oYXMtYmVlbi1hY2hpZXZlZCI+IzwvYT4gUmVmbGVjdGlvbiBvbiB3aGF0IGhhcyBiZWVuIGFjaGlldmVkOjwvaDM+CjxwPllvdSBhcmUgbm93IHJ1bm5pbmcgeW91ciB2ZXJ5IDxzdHJvbmc+b3duIHByaXZhdGUgRVBTIFNlcnZlcjwvc3Ryb25nPi4gIEFsbCBFbGVjdHJ1bSBXYWxsZXQgcmVsYXRlZCBkYXRhIHRyYW5zZmVyIGhhcHBlbnMgZGlyZWN0bHkgYmV0d2VlbiB5b3VyIEVQUyBTZXJ2ZXIgYW5kIHRoZSBiaXRjb2luIGJsb2NrY2hhaW4sIHdpdGhvdXQgZ29pbmcgb3ZlciBhbnkgb3RoZXIgM3JkIHBhcnR5IHNlcnZlcnMuICBZb3UgaGF2ZSBhdHRhaW5lZCBmdWxsIGJpdGNvaW4gdHJhbnNhY3Rpb24gcHJpdmFjeSAoYXQgbGVhc3QgZnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgeW91ciBibG9ja2NoYWluIHF1ZXJpZXMgYW5kIHRyYW5zYWN0aW9ucywgcGF5bWVudC9yZWNlaXZlIGFkZHJlc3NlcyBldGMgLSBub2JvZHkgZXhjZXB0IHlvdSBhbmQgdGhlIGJsb2NrY2hhaW4gY2FuIHNlZSB3aGF0IHlvdSBhcmUgZG9pbmcpLjwvcD4KPGgzIGlkPSJ0cm91Ymxlc2hvb3RpbmciPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjdHJvdWJsZXNob290aW5nIj4jPC9hPiBUcm91Ymxlc2hvb3Rpbmc6PC9oMz4KPHA+U28gdGhlcmUgaXMgb25lIHRoaW5nIHlvdSBtYXkgZW5jb3VudGVyLCB3aGVyZSBldmVuIGFmdGVyIHlvdSBkaWQgZXZlcnl0aGluZyBjb3JyZWN0bHksIHlvdSBzdGlsbCBnZXQgYSByZWQgdHJhZmZpYyBsaWdodCAod2hpY2ggbWVhbnMgbm90IGNvbm5lY3RlZCB0byBhbnkgc2VydmVyKSBpbiB0aGUgc3RlcHMgYWJvdmUuICBBbnkgb3RoZXIgdHJvdWJsZXNob290aW5nIHRpcHMgdGhhdCBwZW9wbGUgZW5jb3VudGVyIGNhbiBiZSBhZGRlZCwgSSB3b3VsZCBzdWdnZXN0IHRvIG1ha2UgYSBQUiB0byB0aGlzIGRvY3VtZW50IGRpcmVjdGx5LjwvcD4KPHVsPgo8bGk+SWYgeW91IGdldCBhIHJlZCB0cmFmZmljIGxpZ2h0LCBzaHV0ZG93biBFbGVjdHJ1bSBXYWxsZXQgY29tcGxldGVseSwgdGhlbiBnbyB0byB5b3VyIEVsZWN0cnVtIFdhbGxldCBmb2xkZXIgKDxhIGhyZWY9Imh0dHBzOi8vZWxlY3RydW0ucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2ZhcS5odG1sI3doZXJlLWlzLW15LXdhbGxldC1maWxlLWxvY2F0ZWQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPnNlZSBoZXJlPE91dGJvdW5kTGluay8+PC9hPiBpZiB5b3UgZG9uJ3Qga25vdyB3aGVyZSB0aGF0IGlzKS48L2xpPgo8L3VsPgo8cD5JbnNpZGUgdGhlIEVsZWN0cnVtIFdhbGxldCBmb2xkZXIgKGluIHRoaXMgY2FzZSBiZWxvdywgaXQgaXMgd2hhdCBpdCBsb29rcyBsaWtlIG9uIGEgTWFjKSBsb2NhdGUgdGhlIDxjb2RlPmNlcnRzPC9jb2RlPiBkaXJlY3RvcnkgYW5kIGRlbGV0ZSB0aGUgY2VydGlmaWNhdGUgZm9yIHRoZSBzZXJ2ZXIgeW91IGFyZSB0cnlpbmcgdG8gY29ubmVjdCB0bywgaW4gdGhpcyBjYXNlIDxjb2RlPjE5Mi4xNjguMS4zPC9jb2RlPiwgYnkgZHJhZ2dpbmcgaXQgdG8gdGhlIFRyYXNoLjwvcD4KPGZpZ3VyZT48aW1nIHNyYz0iaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM4ODUwNy82ODQ5NzMzMC05YTczYTUwMC0wMjU0LTExZWEtOTM0OS03MWJkYjNiZDk1MTEucG5nIiBhbHQ9IkNlcnRzIiB0aXRsZT0iQ2VydGlmaWNhdGVzIj48L2ZpZ3VyZT4KPHA+U3RhcnQgdXAgRWxlY3RydW0gV2FsbGV0IGFnYWluLCBhbmQgY29ubmVjdCB0byB5b3VyIDxzdHJvbmc+RVBTIHNlcnZlcjwvc3Ryb25nPi4gIElmIGl0IGlzIGZ1bGx5IHN5bmNoZWQsIGl0IHdpbGwgbm93IGxpa2VseSBzaG93IGEgZ3JlZW4gdHJhZmZpYyBsaWdodCwgYW5kIHlvdSBhcmUgZ29vZCB0byBnby48L3A+CjwvQ29udGVudFNsb3RzRGlzdHJpYnV0b3I+Cg=="},null]}