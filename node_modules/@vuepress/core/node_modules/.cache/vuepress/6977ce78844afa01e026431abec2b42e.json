{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/HardwareWalletIntegration.md?vue&type=template&id=596e5ee0&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/HardwareWalletIntegration.md","mtime":1617331587404},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJoYXJkd2FyZS13YWxsZXQtaW50ZWdyYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hhcmR3YXJlLXdhbGxldC1pbnRlZ3JhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhhcmR3YXJlIFdhbGxldCBJbnRlZ3JhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZvciBvcHRpbWFsIGJhbGFuY2UgYmV0d2VlbiBlYXNlIG9mIHVzZSwgc2VjdXJpdHkgYW5kIHByaXZhY3ksIGl0J3MgcmVjb21tZW5kZWQgdG8gdXNlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvV2FsbGV0LyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQlRDUGF5IFNlcnZlciBXYWxsZXQiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiB3aXRoIGEgaGFyZHdhcmUgd2FsbGV0LiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGhhcmR3YXJlIHdhbGxldCBpbnRlZ3JhdGlvbiB3aXRoaW4gQlRDUGF5IFNlcnZlciBhbGxvd3MgeW91IHRvIGltcG9ydCB5b3VyIGhhcmR3YXJlIHdhbGxldCBhbmQgc3BlbmQgdGhlIGluY29taW5nIGZ1bmRzIHdpdGggYSBzaW1wbGUgY29uZmlybWF0aW9uIG9uIHlvdXIgZGV2aWNlLiBZb3VyIHByaXZhdGUga2V5cyBuZXZlciBsZWF2ZSB0aGUgZGV2aWNlIGFuZCBhbGwgZnVuZHMgYXJlIGJlaW5nIHZhbGlkYXRlZCBhZ2FpbnN0IHlvdXIgb3duIGZ1bGwgbm9kZSBhbmQgbm8gZGF0YSBsZWFrYWdlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImdldHRpbmctc3RhcnRlZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZ2V0dGluZy1zdGFydGVkIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHZXR0aW5nIFN0YXJ0ZWQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInl0RW1iZWQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICJ1cmwoaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvaGhfY204TUtsMmcvaHFkZWZhdWx0LmpwZykiCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9aGhfY204TUtsMmciLAogICAgICAgICAgICAiZGF0YS1pZCI6ICJoaF9jbThNS2wyZyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgdGl0bGU6ICJZb3VUdWJlIiwKICAgICAgICAgICAgICAiZGF0YS1zcmMiOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkL2hoX2NtOE1LbDJnPyZhdXRvcGxheT0xJmF1dG9oaWRlPTEmbW9kZXN0YnJhbmRpbmc9MSZjb2xvcj13aGl0ZSZyZWw9MCIsCiAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgICAgICBhbGxvdzogImF1dG9wbGF5O2VuY3J5cHRlZC1tZWRpYTtwaWN0dXJlLWluLXBpY3R1cmUiLAogICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2J0Y3BheXNlcnZlci9CVENQYXlTZXJ2ZXIuVmF1bHQvcmVsZWFzZXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJEb3dubG9hZCB0aGUgQlRDUGF5IFZhdWx0IGFwcCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbnN0YWxsIHRoZSBWYXVsdCBvbiB5b3VyIFBDIChXaW5kb3dzLCBNYWNPUyBvciBMaW51eCkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk9wZW4gdGhlIEJUQ1BheSBWYXVsdCBhcHAiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBsdWcgaW4gdGhlIGhhcmR3YXJlIHdhbGxldCBpbnRvIHlvdXIgUEMgYW5kIG1ha2Ugc3VyZSBpdOKAmXMgaW4gYSB3YWtlIHVwIHN0YXRlIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkdvIHRvIHlvdXIgQlRDUGF5IFNlcnZlcuKAmXMgU3RvcmUgPiBTZXR0aW5ncyA+IFdhbGxldCA+IFNldHVwID4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJbXBvcnQgZnJvbSBhIGhhcmR3YXJlIHdhbGxldCIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJHcmFudCB0aGUgcGVybWlzc2lvbiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHB1YmxpYyBrZXkgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIGltcG9ydGVkIGluIHRoZSBzdG9yZSBhbmQgY29uZmlndXJlZCB0byBhbiBhcHByb3ByaWF0ZSBmb3JtYXQiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVmFsaWRhdGUgdGhhdCBhZGRyZXNzIHNob3duIG9uIEJUQ1BheSBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIG9uIHlvdXIgZGV2aWNlIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNhdmUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9CVENQYXlWYXVsdFN0b3JlU2V0dXAxLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJCVENQYXkgU2VydmVyIFZhdWx0IGNvbmZpZ3VyYXRpb24iLAogICAgICAgICAgICB0aXRsZTogIkJUQ1BheSBTZXJ2ZXIgVmF1bHQgY29uZmlndXJhdGlvbiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQlRDUGF5VmF1bHRTdG9yZVNldHVwMi5wbmciKSwKICAgICAgICAgICAgYWx0OiAiQlRDUGF5IFNlcnZlciBWYXVsdCBjb25maWd1cmF0aW9uIiwKICAgICAgICAgICAgdGl0bGU6ICJCVENQYXkgU2VydmVyIFZhdWx0IGNvbmZpZ3VyYXRpb24iCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0JUQ1BheVZhdWx0U3RvcmVTZXR1cDMucG5nIiksCiAgICAgICAgICAgIGFsdDogIkJUQ1BheSBTZXJ2ZXIgVmF1bHQgY29uZmlndXJhdGlvbiIsCiAgICAgICAgICAgIHRpdGxlOiAiQlRDUGF5IFNlcnZlciBWYXVsdCBjb25maWd1cmF0aW9uIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9CVENQYXlWYXVsdFN0b3JlU2V0dXA0LnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJCVENQYXkgU2VydmVyIFZhdWx0IGNvbmZpZ3VyYXRpb24iLAogICAgICAgICAgICB0aXRsZTogIkJUQ1BheSBTZXJ2ZXIgVmF1bHQgY29uZmlndXJhdGlvbiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQlRDUGF5VmF1bHRTdG9yZVNldHVwNS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiQlRDUGF5IFNlcnZlciBWYXVsdCBjb25maWd1cmF0aW9uIiwKICAgICAgICAgICAgdGl0bGU6ICJCVENQYXkgU2VydmVyIFZhdWx0IGNvbmZpZ3VyYXRpb24iCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0JUQ1BheVZhdWx0U3RvcmVTZXR1cDYucG5nIiksCiAgICAgICAgICAgIGFsdDogIkJUQ1BheSBTZXJ2ZXIgVmF1bHQgY29uZmlndXJhdGlvbiIsCiAgICAgICAgICAgIHRpdGxlOiAiQlRDUGF5IFNlcnZlciBWYXVsdCBjb25maWd1cmF0aW9uIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9CVENQYXlWYXVsdFN0b3JlU2V0dXA3LnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJCVENQYXkgU2VydmVyIFZhdWx0IGNvbmZpZ3VyYXRpb24iLAogICAgICAgICAgICB0aXRsZTogIkJUQ1BheSBTZXJ2ZXIgVmF1bHQgY29uZmlndXJhdGlvbiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzcGVuZGluZy1mdW5kcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3BlbmRpbmctZnVuZHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNwZW5kaW5nIGZ1bmRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25jZSB5b3XigJl2ZSByZWNlaXZlZCBmdW5kcyB0byB5b3VyIHdhbGxldCBhbmQgeW91IGRlY2lkZSB0byBzcGVuZCB0aGVtLCB5b3UgY2FuIHNpZ24gdGhlIHRyYW5zYWN0aW9uIHdpdGggeW91ciBoYXJkd2FyZSB3YWxsZXQsIGFsbCBpbnNpZGUgQlRDUGF5IFNlcnZlci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJPcGVuIEJUQ1BheSBWYXVsdCBhcHAgb24geW91ciBQQyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUGx1ZyBpbiB0aGUgaGFyZHdhcmUgd2FsbGV0IGFuZCBtYWtlIHN1cmUgaXTigJlzIGluIHdha2UgdXAgc3RhdGUiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW4gQlRDUGF5IFNlcnZlciwgZ28gdG8gPiBXYWxsZXRzID4gTWFuYWdlID4gU2VuZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRmlsbCBpbiB0aGUgRGVzdGluYXRpb24gYWRkcmVzcyBhbmQgdGhlIEFtb3VudCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU2VsZWN0IFNpZ24gd2l0aCBhIGhhcmR3YXJlIHdhbGxldCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVmVyaWZ5IHRoZSB0cmFuc2FjdGlvbiBvbiB5b3VyIGhhcmR3YXJlIHdhbGxldCBhbmQgY29uZmlybSBpdCIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJCcm9hZGNhc3QgdGhlIHRyYW5zYWN0aW9uIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQlRDUGF5VmF1bHRXYWxsZXRTZW5kMS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiU2VuZCBCaXRjb2luIHZpYSBCVENQYXkgVmF1bHQiLAogICAgICAgICAgICB0aXRsZTogIlNlbmQgQml0Y29pbiB2aWEgQlRDUGF5IFZhdWx0IgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFkdmFuY2VkLXNldHRpbmdzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhZHZhbmNlZC1zZXR0aW5ncyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFkdmFuY2VkIFNldHRpbmdzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQWRkaXRpb25hbCB0cmFuc2FjdGlvbiBzZXR0aW5ncyBjYW4gYmUgZm91bmQgYnkgY2xpY2tpbmcgb24gdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvV2FsbGV0LyNhZHZhbmNlZC1zZXR0aW5ncyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQWR2YW5jZWQgU2V0dGluZ3MiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgYnV0dG9uLiBJZiB5b3UgYXJlIG5vdCBmYW1pbGlhciB3aXRoIHRoZXNlIHR5cGVzIG9mIHNldHRpbmdzLCB5b3UgbWF5IGxlYXZlIHRoZW0gYXMgaXMgdG8gdXNlIHRoZSBkZWZhdWx0IHNldHRpbmdzLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBpc3N1ZXMgc2VuZGluZyB0cmFuc2FjdGlvbnMgZnJvbSBhIFRyZXpvciB3YWxsZXQsIHlvdSBtYXkgbmVlZCB0byBlbmFibGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1XYWxsZXQvI3doeS1pcy1zZW5kaW5nLWEtdHJhbnNhY3Rpb24tdXNpbmctdHJlem9yLWZhaWxpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJ0aGlzIGFkdmFuY2VkIHNldHRpbmciKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9CVENQYXlWYXVsdFdhbGxldFNlbmQyLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJTZW5kIEJpdGNvaW4gdmlhIEJUQ1BheSBWYXVsdCIsCiAgICAgICAgICAgIHRpdGxlOiAiU2VuZCBCaXRjb2luIHZpYSBCVENQYXkgVmF1bHQiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic3VwcG9ydGVkLWhhcmR3YXJlLXdhbGxldHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N1cHBvcnRlZC1oYXJkd2FyZS13YWxsZXRzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VwcG9ydGVkIEhhcmR3YXJlIFdhbGxldHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIGhhcmR3YXJlIHdhbGxldHMgaXMgYXZhaWxhYmxlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi1jb3JlL0hXSSNkZXZpY2Utc3VwcG9ydCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigib24gdGhpcyBsaW5rIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHdhcm5pbmciIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFtfdm0uX3YoIldBUk5JTkciKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBoYXJkd2FyZSB3YWxsZXQgaW50ZWdyYXRpb24gaW4gQlRDUGF5IFNlcnZlciBvbmx5IHN1cHBvcnRzIEJpdGNvaW4uICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0FsdGNvaW5zLyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBbHRjb2luIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIHdhbGxldHMgZW5hYmxlZCBvbiB5b3VyIHNlcnZlciB3b24ndCB3b3JrLiIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}