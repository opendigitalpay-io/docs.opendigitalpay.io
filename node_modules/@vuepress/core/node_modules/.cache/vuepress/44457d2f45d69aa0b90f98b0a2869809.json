{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/FAQ/FAQ-ServerSettings.md?vue&type=template&id=e2a855de&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/FAQ/FAQ-ServerSettings.md","mtime":1617331587402},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJoMSIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInNlcnZlci1zZXR0aW5ncy1mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2VydmVyLXNldHRpbmdzLWZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBTZXJ2ZXIgU2V0dGluZ3MgRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGlzIGRvY3VtZW50IGNvdmVycyBhbGwgdGhlIHF1ZXN0aW9ucyBhbmQgaXNzdWVzIHJlbGF0ZWQgdG8gU2VydmVyIFNldHRpbmdzLiBUaGVzZSBzZXR0aW5ncyBhcmUgb25seSBhdmFpbGFibGUgdG8gdGhlIHNlcnZlciBhZG1pbi4gVGFrZSBhIGxvb2sgYXQgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvV2Fsa3Rocm91Z2gvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJ3YWxrdGhyb3VnaCBwYWdlIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gbGVhcm4gbW9yZS4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm1haW50ZW5hbmNlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNtYWludGVuYW5jZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWFpbnRlbmFuY2UiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8tdXBkYXRlLWJ0Y3BheS1zZXJ2ZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgdG8gdXBkYXRlIEJUQ1BheSBTZXJ2ZXI/IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8tcmVzdGFydC1idGNwYXktc2VydmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IHRvIHJlc3RhcnQgQlRDUGF5IFNlcnZlcj8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LXRvLXNzaC1pbnRvLW15LWJ0Y3BheS1ydW5uaW5nLW9uLXZwcyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkhvdyB0byBTU0ggaW50byBteSBCVENQYXkgcnVubmluZyBvbiBWUFM/IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctY2FuLWktc2VlLW15LWJ0Y3BheS12ZXJzaW9uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IGNhbiBJIGNoZWNrIG15IEJUQ1BheSBTZXJ2ZXIgdmVyc2lvbj8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LWNhbi1pLWNoZWNrLW15LWJ0Y3BheS1zZXJ2ZXItdmVyc2lvbi12aWEtdGVybWluYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgY2FuIEkgY2hlY2sgbXkgQlRDUGF5IFNlcnZlciB2ZXJzaW9uIHZpYSB0ZXJtaW5hbD8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvI3doYXQtaXMtYnRjcGF5LXNzaC1rZXktZmlsZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIldoYXQgaXMgQlRDUGF5IFNTSCBrZXkgZmlsZT8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvI2ZvcmdvdC1idGNwYXktYWRtaW4tcGFzc3dvcmQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJGb3Jnb3QgQlRDUGF5IEFkbWluIHBhc3N3b3JkIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8tYWRkLWEtbmV3LXVzZXItYnktaW52aXRlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IHRvIGFkZCBhIG5ldyB1c2VyIGJ5IGludml0ZT8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LXRvLWRpc2FibGUtdTJmLWFuZC0yZmEtZm9yLWEtdXNlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkhvdyB0byBkaXNhYmxlIFUyRiBhbmQgMkZBIGZvciBhIHVzZXI/IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvI2hvdy10by1jb25maWd1cmUtc210cC1zZXR0aW5ncy1pbi1idGNwYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgdG8gY29uZmlndXJlIFNNVFAgc2V0dGluZ3MgaW4gQlRDUGF5PyIpXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNlcnJvci1tYWludGVuYW5jZS1mZWF0dXJlLXJlcXVpcmVzLWFjY2Vzcy10by1TU0gtcHJvcGVybHktY29uZmlndXJlZC1pbi1idGNwYXlzZXJ2ZXItY29uZmlndXJhdGlvbiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkVycm9yOiBNYWludGVuYW5jZSBmZWF0dXJlIHJlcXVpcmVzIGFjY2VzcyB0byBTU0ggcHJvcGVybHkgY29uZmlndXJlZCBpbiBCVENQYXlTZXJ2ZXIgY29uZmlndXJhdGlvbiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvI2Vycm9yLXlvdXItbG9jYWwtY2hhbmdlcy10by10aGUtZm9sbG93aW5nLWZpbGVzLXdvdWxkLWJlLW92ZXJ3cml0dGVuLWJ5LW1lcmdlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiRXJyb3I6IFlvdXIgbG9jYWwgY2hhbmdlcyB0byB0aGUgZm9sbG93aW5nIGZpbGVzIHdvdWxkIGJlIG92ZXJ3cml0dGVuIGJ5IG1lcmdlIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jZXJyb3ItYnRjcGF5LXNzaGtleWZpbGUtaXMtbm90LXNldC13aGVuLXJ1bm5pbmctdGhlLWRvY2tlci1pbnN0YWxsLW9yLXVuYWJsZS10by11cGRhdGUtdGhyb3VnaC1zZXJ2ZXItc2V0dGluZ3MtbWFpbnRlbmFuY2UiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJFcnJvcjogdGhlIEJUQ1BBWV9TU0hLRVlGSUxFIHZhcmlhYmxlIGlzIG5vdCBzZXQvIFVuYWJsZSB0byB1cGRhdGUiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidGhlbWUtY3VzdG9taXphdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGhlbWUtY3VzdG9taXphdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRoZW1lIC8gQ3VzdG9taXphdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LXRvLWN1c3RvbWl6ZS1teS1idGNwYXktdGhlbWUtc3R5bGUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgdG8gY3VzdG9taXplIG15IEJUQ1BheSB0aGVtZSBzdHlsZT8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvI2hvdy10by1tb2RpZnktdGhlLWNoZWNrb3V0LXBhZ2UiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgdG8gbW9kaWZ5IHRoZSBCVENQYXkgY2hlY2tvdXQgcGFnZT8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1RoZW1lLyMyLWJvb3RzdHJhcC10aGVtZXMiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiSG93IHRvIGN1c3RvbWl6ZSB0aGUgUE9TIGFwcCB0aGVtZT8iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LXRvLWFkZC1nb29nbGUtYW5hbHl0aWNzLWNvZGUtdG8tYnRjcGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IHRvIGFkZCBHb29nbGUgQW5hbHl0aWNzIGNvZGUgdG8gQlRDUGF5PyIpXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicG9saWNpZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3BvbGljaWVzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQb2xpY2llcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LXRvLWFsbG93LXJlZ2lzdHJhdGlvbi1vbi1teS1idGNwYXktc2VydmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IHRvIGFsbG93IHJlZ2lzdHJhdGlvbiBvbiBteSBCVENQYXkgU2VydmVyPyIpXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8taGlkZS1teS1idGNwYXktc2VydmVyLWZyb20tc2VhcmNoLWVuZ2luZXMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgdG8gaGlkZSBteSBCVENQYXkgU2VydmVyIGZyb20gU2VhcmNoIEVuZ2luZXM/IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzZXJ2aWNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc2VydmljZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNlcnZpY2VzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8tcmVtb3RlbHktY29ubmVjdC10by1teS1idGNwYXktZnVsbC1ub2RlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IHRvIHJlbW90ZWx5IGNvbm5lY3QgdG8gbXkgQlRDUGF5IGZ1bGwgbm9kZT8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZpbGVzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmaWxlcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEZpbGVzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvRkFRL0ZBUS1TZXJ2ZXJTZXR0aW5ncy8jaG93LXRvLXVwbG9hZC1maWxlcy10by1idGNwYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgdG8gdXBsb2FkIGZpbGVzIHRvIEJUQ1BheT8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm1haW50ZW5hbmNlLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI21haW50ZW5hbmNlLTIiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1haW50ZW5hbmNlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLXVwZGF0ZS1idGNwYXktc2VydmVyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tdXBkYXRlLWJ0Y3BheS1zZXJ2ZXIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb3cgdG8gdXBkYXRlIEJUQ1BheSBTZXJ2ZXI/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZXJlIGFyZSAyIHdheXMgdG8gdXBkYXRlIHlvdXIgQlRDUGF5IFNlcnZlcjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlVwZGF0aW5nIGluIHRoZSB1c2VyIGludGVyZmFjZTogU2VydmVyIFNldHRpbmdzID4gTWFpbnRlbmFuY2UgPiBVcGRhdGUuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9pbWcvSG93VG9VcGRhdGVCVENQYXlTZXJ2ZXIucG5nIiksCiAgICAgICAgICAgIGFsdDogIlVwZGF0aW5nIEJUQ1BheSBTZXJ2ZXIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiMiIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVXBkYXRpbmcgdXNpbmcgU1NIOiBMb2dpbiBpbnRvIHlvdXIgdmlydHVhbCBtYWNoaW5lIHdpdGggc3NoLCB0aGVuIGFwcGx5IGZvbGxvd2luZyBjb21tYW5kczoiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzdWRvIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInN1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIC1cbiIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gYnVpbHRpbiBjbGFzcy1uYW1lIiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiY2QiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgYnRjcGF5c2VydmVyLWRvY2tlclxuYnRjcGF5LXVwZGF0ZS5zaFxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8tcmVzdGFydC1idGNwYXktc2VydmVyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tcmVzdGFydC1idGNwYXktc2VydmVyIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIHJlc3RhcnQgQlRDUGF5IFNlcnZlcj8iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlcmUgYXJlIDIgd2F5cyB0byByZXN0YXJ0IHlvdXIgQlRDUGF5IFNlcnZlcjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlJlc3RhcnRpbmcgaW4gdGhlIHVzZXIgaW50ZXJmYWNlOiBTZXJ2ZXIgU2V0dGluZ3MgPiBNYWludGVuYW5jZSA+IFJlc3RhcnQuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9pbWcvSG93VG9SZXN0YXJ0QlRDUGF5U2VydmVyLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJSZXN0YXJ0aW5nIEJUQ1BheSBTZXJ2ZXIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiMiIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVzdGFydGluZyB1c2luZyBTU0g6IExvZ2luIGludG8geW91ciB2aXJ0dWFsIG1hY2hpbmUgd2l0aCBzc2gsIHRoZW4gYXBwbHkgZm9sbG93aW5nIGNvbW1hbmRzOiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtYmFzaCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS1iYXNoIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInN1ZG8iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3UiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgLVxuIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJjZCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiBidGNwYXlzZXJ2ZXItZG9ja2VyXG5idGNwYXktcmVzdGFydC5zaFxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8tc3NoLWludG8tbXktYnRjcGF5LXJ1bm5pbmctb24tdnBzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tc3NoLWludG8tbXktYnRjcGF5LXJ1bm5pbmctb24tdnBzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIFNTSCBpbnRvIG15IEJUQ1BheSBydW5uaW5nIG9uIFZQUz8iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiRm9sbG93IHRoZXNlIGluc3RydWN0aW9ucyB0byBTU0ggdmlhIGRvbWFpbiBvciBJUDoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJzc2ggZG9tYWludXNlckBleGFtcGxlLmNvbSAoZG9tYWluKVxub3JcbnNzaCBkb21haW51c2VyQDcwLjMyLjg2LjE3NSAoSVApXG5cbmRvbWFpbnVzZXJAZXhhbXBsZS5jb20ncyBwYXNzd29yZDpcbnlvdXJQYXNzd29yZFxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlByZXNzIEVudGVyIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB0aGlzIGlzIHlvdXIgZmlyc3QgdGltZSBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXIgZnJvbSB0aGlzIGNvbXB1dGVyLCB5b3Ugd2lsbCBzZWUgdGhlIGZvbGxvd2luZyBvdXRwdXQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBhdXRoZW50aWNpdHkgb2YgaG9zdCAnZXhhbXBsZS5jb20gKDcwLjMyLjg2LjE3NSknIGNhbid0IGJlIGVzdGFibGlzaGVkLlxuUlNBIGtleSBmaW5nZXJwcmludCBpcyAzYzo2ZDo1Yzo5OTo1ZDpiNTpjNjoyNTo1YTpkMzo3ODo4ZTpkMjpmNTo3YTowMS5cbkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjb250aW51ZSBjb25uZWN0aW5nICh5ZXMvbm8pP1xuXG55ZXNcbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJPciBzZWUgdGhpcyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9KZWZmVmFuZHJld0pyL3BhdHJvbi9ibG9iL21hc3Rlci9TU0gubWQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkx1bmFOb2RlIGV4YW1wbGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIHdpdGggUHVUVFkuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LWNhbi1pLXNlZS1teS1idGNwYXktdmVyc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG93LWNhbi1pLXNlZS1teS1idGNwYXktdmVyc2lvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyBjYW4gSSBzZWUgbXkgQlRDUGF5IHZlcnNpb24/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIllvdSBjYW4gc2VlIHlvdXIgQlRDUGF5IHZlcnNpb24gaW4gdGhlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJib3R0b20gcmlnaHQgb2YgdGhlIHBhZ2UgZm9vdGVyIildKSwKICAgICAgICBfdm0uX3YoIiB3aGVuIHlvdSdyZSBsb2dnZWQgaW4gYXMgYSBzZXJ2ZXIgYWRtaW4uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRGVwbG95bWVudHMgdXNpbmcgdjEuMC41LjcgYW5kIGxhdGVyIHdpbGwgYXV0b21hdGljYWxseSByZWNlaXZlIG5vdGlmaWNhdGlvbnMgdG8gYWxlcnQgd2hlbiBhIG5ldyBCVENQYXkgU2VydmVyIHZlcnNpb24gaGFzIGJlZW4gcmVsZWFzZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2ltZy9ub3RpZmljYXRpb25zL25vdGlmaWNhdGlvbi12ZXJzaW9uLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJWZXJzaW9uIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJOb3RlOiBUaGlzIGZlYXR1cmUgd2lsbCBhdXRvbWF0aWNhbGx5IHNldCB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJCVENQQVlfVVBEQVRFVVJMIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGVudmlyb25tZW50IHZhcmlhYmxlIGluIHRoZSBCVENQYXkgU2VydmVyIGNvbnRhaW5lciB0byBtYWtlIGEgc2luZ2xlIGRhaWx5IHJlcXVlc3QgdG8gIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL2J0Y3BheXNlcnZlci9idGNwYXlzZXJ2ZXIvcmVsZWFzZXMvbGF0ZXN0IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJ0aGlzIEdpdGh1YiBlbmRwb2ludCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gU2VydmVyIGFkbWlucyBjYW4gZGlzYWJsZSB0aGVzZSBub3RpZmljYXRpb25zIGJ5IGRpc2FibGluZyB0aGUgcG9saWN5IGluIFNlcnZlciBTZXR0aW5ncyA+IFBvbGljaWVzID4gQ2hlY2sgcmVsZWFzZXMgb24gR2l0SHViLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogImhvdy1jYW4taS1jaGVjay1teS1idGNwYXktc2VydmVyLXZlcnNpb24tdmlhLXRlcm1pbmFsIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNob3ctY2FuLWktY2hlY2stbXktYnRjcGF5LXNlcnZlci12ZXJzaW9uLXZpYS10ZXJtaW5hbCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBIb3cgY2FuIEkgY2hlY2sgbXkgQlRDUGF5IFNlcnZlciB2ZXJzaW9uIHZpYSB0ZXJtaW5hbD8iKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSW4gdGhlIGJ0Y3BheXNlcnZlci1kb2NrZXIgZm9sZGVyOiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJpdGNvaW4tY2xpLnNoIGdldG5ldHdvcmtpbmZvIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGF0LWlzLWJ0Y3BheS1zc2gta2V5LWZpbGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doYXQtaXMtYnRjcGF5LXNzaC1rZXktZmlsZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgaXMgQlRDUGF5IFNTSCBrZXkgZmlsZT8iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCVENQYXkgU1NIIGtleSwgZW5hYmxlcyB1c2VycyB0byB1cGRhdGUgdGhlaXIgc2VydmVyIG9yIHF1aWNrbHkgY2hhbmdlIHRoZSBkb21haW4gbmFtZSBmcm9tIGJ0Y3BheSB3ZWJzaXRlLCB2aWEgdGhlIHVzZXIgaW50ZXJmYWNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZvcmdvdC1idGNwYXktYWRtaW4tcGFzc3dvcmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2ZvcmdvdC1idGNwYXktYWRtaW4tcGFzc3dvcmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGb3Jnb3QgQlRDUGF5IEFkbWluIHBhc3N3b3JkPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0ZpcnN0LCByZWdpc3RlciBhIG5ldyB1c2VyIG9uIHlvdXIgQlRDUGF5IFNlcnZlciwgYnkgY2xpY2tpbmcgIlJlZ2lzdGVyIiwgZm9yIGV4YW1wbGU6ICJuZXdhZG1pbkBleGFtcGxlLmNvbSIuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91IGNhbid0IGNyZWF0ZSBhIG5ldyB1c2VyIGJlY2F1c2UgcmVnaXN0cmF0aW9ucyBhcmUgZGlzYWJsZWQgaW4geW91ciBTZXJ2ZXIgU2V0dGluZ3MgPiBQb2xpY2llcywgeW91IG5lZWQgdG8gcmVzZXQgdGhlIHBvbGljaWVzIHNldHRpbmdzLiBQbGVhc2Ugc2tpcCB0aGlzIHN0ZXAgaWYgeW91IGNhbiBjcmVhdGUgYSBuZXcgdXNlciBvbiB0aGUgZnJvbnQtZW5kIGhvbWUgcGFnZSB1c2luZyB0aGUgcmVnaXN0ZXIgYnV0dG9uLiBSdW4gdGhlIGZvbGxvd2luZyBjb21tYW5kIChJdCBhbHNvIGRlbGV0ZXMgYW55IG90aGVyIHNlcnZlciBzZXR0aW5ncyBjdXJyZW50bHkgYmVpbmcgdXNlZCk6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBjb21tZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiMgSW4gcm9vdCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3VkbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzdSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAtXG4iKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGJ1aWx0aW4gY2xhc3MtbmFtZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImNkIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHZhcmlhYmxlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiRCVENQQVlfQkFTRV9ESVJFQ1RPUlkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIvYnRjcGF5c2VydmVyLWRvY2tlci9cbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGNvbW1lbnQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIyBSZS1vcGVuIHJlZ2lzdHJhdGlvbnMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbi4vYnRjcGF5LWFkbWluLnNoIHJlc2V0LXNlcnZlci1wb2xpY3lcbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGVhZCBiYWNrIHRvIHlvdXIgQlRDUGF5IFNlcnZlciBhbmQgY2xpY2sgb24gdGhlIFwiUmVnaXN0ZXJcIiBidXR0b24gd2hpY2ggc2hvdWxkIG5vdyBiZSBlbmFibGVkLiBJbiBjYXNlIHlvdSBkb24ndCBzZWUgdGhlIFJlZ2lzdGVyIGxpbmsgaW4gdGhlIG1lbnUsIHRoYXQncyBwcm9iYWJseSBiZWNhdXNlIG9mIHRoZSBjYWNoaW5nLiBSZXN0YXJ0IHlvdXIgYnRjcGF5IHdpdGggIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJidGNwYXktcmVzdGFydC5zaCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5leHQsIGFkZCB0aGUgbmV3bHkgcmVnaXN0ZXJlZCB1c2VyICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibmV3YWRtaW5AZXhhbXBsZS5jb20iKV0pLAogICAgICAgIF92bS5fdigiIGFzIGFuIGFkbWluOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1iYXNoIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWJhc2giIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIjIFNldCBuZXcgdXNlciBhcyBhZG1pbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuLi9idGNwYXktYWRtaW4uc2ggc2V0LXVzZXItYWRtaW4gbmV3YWRtaW5AZXhhbXBsZS5jb21cbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5vdyB5b3UgY2FuIGFjY2VzcyB3aXRoICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibmV3YWRtaW5AZXhhbXBsZS5jb20iKV0pLAogICAgICAgIF92bS5fdigiIGFzIGFkbWluLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoZW4geW91IGFwcGx5IHRoZSBjaGFuZ2VzLCB5b3UnbGwgbm90aWNlIHRoYXQgdGhlIG5ld2x5IGNyZWF0ZWQgdXNlciBpc24ndCBhIG1lbWJlciBvZiBhbnkgc3RvcmVzLiBJbiB0aGF0IGNhc2UsICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vanVzdGlubW9vbi84MTI4ZTY2ZmMxMWQ5MGFlNTczMmYyNDkxNTcwYmZjNSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiZm9sbG93IHRoaXMgZ3VpZGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIHRvIGFkZCB0aGUgbmV3IHVzZXIgdG8gYWxsIG9yIGNlcnRhaW4gc3RvcmVzLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImhvdy10by1hZGQtYS1uZXctdXNlci1ieS1pbnZpdGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10by1hZGQtYS1uZXctdXNlci1ieS1pbnZpdGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb3cgdG8gYWRkIGEgbmV3IHVzZXIgYnkgaW52aXRlPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNlcnZlciBhZG1pbnMgY2FuIGFkZCBuZXcgdXNlcnMgYnkgY3JlYXRpbmcgYW4gaW52aXRlIGxpbmsgdG8gc2hhcmUgd2l0aCB0aGVtLiBUaGlzIGNhbiBhbGxvdyBhZG1pbnMgdG8gZGlzYWJsZSBwdWJsaWMgcmVnaXN0cmF0aW9uIG9uIHRoZSBzZXJ2ZXIsIG9yIHRvIGludml0ZSBzcGVjaWZpYyB1c2VycyBieSBjbGlja2luZzogU2VydmVyIFNldHRpbmdzID4gQWRkIFVzZXIgKGRvIG5vdCBwcm92aWRlIHBhc3N3b3JkKSA+IENyZWF0ZSBhY2NvdW50IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2ltZy9JbnZpdGVVc2VyLnBuZyIpLCBhbHQ6ICJJbnZpdGUgVXNlciIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkEgc2hhcmVhYmxlIGxpbmsgd2lsbCBiZSBkaXNwbGF5ZWQgZm9yIHRoZSBzZXJ2ZXIgYWRtaW4gdG8gZGlzdHJpYnV0ZS4gQW4gZW1haWwgd2lsbCBiZSBzZW50IChpZiBlbWFpbCBpcyAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tY29uZmlndXJlLXNtdHAtc2V0dGluZ3MtaW4tYnRjcGF5IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCJjb25maWd1cmVkIG9uIHRoZSBzZXJ2ZXIiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8gc2V0IHRoZSBwYXNzd29yZC4gVGhlIG5ldyB1c2VyIHdpbGwgY3JlYXRlIGEgcGFzc3dvcmQgdXBvbiBmaXJzdCB2aXNpdCB0byB0aGUgaW52aXRlIGxpbmsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLWRpc2FibGUtdTJmLWFuZC0yZmEtZm9yLWEtdXNlciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG93LXRvLWRpc2FibGUtdTJmLWFuZC0yZmEtZm9yLWEtdXNlciIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyB0byBkaXNhYmxlIFUyRiBhbmQgMkZBIGZvciBhIHVzZXI/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUmVtb3ZlIFUyRiBhbmQgMkZBIHNldHRpbmdzIGZvciBhIHJlZ2lzdGVyZWQgdXNlciwgZm9yIGV4YW1wbGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ1c2VyQGV4YW1wbGUuY29tIildKSwKICAgICAgICBfdm0uX3YoIiB3aXRoIHRoZSBmb2xsb3dpbmcgY29tbWFuZHM6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBjb21tZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiMgSW4gcm9vdCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3VkbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzdSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAtXG4iKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGJ1aWx0aW4gY2xhc3MtbmFtZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImNkIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHZhcmlhYmxlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiRCVENQQVlfQkFTRV9ESVJFQ1RPUlkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIvYnRjcGF5c2VydmVyLWRvY2tlci9cbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGNvbW1lbnQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIyBEaXNhYmxlIFUyRiBhbmQgMkZBIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4uL2J0Y3BheS1hZG1pbi5zaCBkaXNhYmxlLW11bHRpZmFjdG9yIHVzZXJAZXhhbXBsZS5jb21cbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLWNvbmZpZ3VyZS1zbXRwLXNldHRpbmdzLWluLWJ0Y3BheSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG93LXRvLWNvbmZpZ3VyZS1zbXRwLXNldHRpbmdzLWluLWJ0Y3BheSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyB0byBjb25maWd1cmUgU01UUCBzZXR0aW5ncyBpbiBCVENQYXk/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU01UUCBjYW4gYmUgY29uZmlndXJlZCBpbiBzZXR0aW5ncyBmb3IgZWFjaCBzdG9yZS4gSXQgY2FuIGFsc28gYmUgY29uZmlndXJlZCBmb3IgdGhlIGVudGlyZSBzZXJ2ZXIgaWYgeW91IGhhdmUgYWRtaW4gcHJpdmlsZWdlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFYWNoIGUtbWFpbCBwcm92aWRlciBoYXMgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24sIHNvIHdlIGNhbid0IHByb3ZpZGUgeW91IHdpdGggZXhhY3Qgc2V0dXAsIGJ1dCBoZXJlJ3MgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIGdtYWlsOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJTTVRQIEhvc3Q6IHNtdHAuZ21haWwuY29tXG5TTVRQIFBvcnQ6IDU4N1xuU1NMIFByb3RvY29sOiBPTlxuVExTIFByb3RvY29sOiBPTlxuU01UUCBVc2VybmFtZTogKHlvdXIgR21haWwgdXNlcm5hbWUpXG5TTVRQIFBhc3N3b3JkOiAoeW91ciBHbWFpbCBwYXNzd29yZClcbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBnbWFpbCBpdCdzIGltcG9ydGFudCB0byBhbGxvdyBhY2Nlc3MgZnJvbSBsZXNzIHNlY3VyZSBhcHBzLiBUbyBlbmFibGUgZ28gdG86IE1hbmFnZSBZb3VyIEdvb2dsZSBBY2NvdW50ID4gU2VjdXJpdHkgPiBBbGxvdyBMZXNzIFNlY3VyZSBBcHBzIChPbikuIEFsc28gbm90ZSBHb29nbGUgbWF5IGF1dG9tYXRpY2FsbHkgdHVybiBvZmYgdGhpcyBzZXR0aW5nIGlmIGl04oCZcyBub3QgYmVpbmcgdXNlZC4gSWYgeW91ciBzbXRwIGhhcyBzdG9wcGVkIHdvcmtpbmcsIGNoZWNrIHRoaXMgc2V0dGluZyBpcyBub3Qgb2ZmLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIGJ5IGFueSBjaGFuY2UgeW91IGhhdmUgMi1zdGVwIHZlcmlmaWNhdGlvbiBhZGRlZCB0byB5b3VyIGdtYWlsIGFjY291bnQsICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9tYWlsL2Fuc3dlci8xODU4MzM/aGw9ZW4iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInZpc2l0IHRoaXMgYXJ0aWNsZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVXNlIHRoZSB0ZXN0IGVtYWlsIGZlYXR1cmUgaW4gQlRDUGF5IHRvIHZlcmlmeSB5b3VyIGVtYWlscyBhcmUgYmVpbmcgc2VudCBwcm9wZXJseS4gSWYgeW91IGFyZSBzZWVraW5nIGEgbW9yZSByZWxpYWJsZSBzbXRwIHNlcnZpY2UgZm9yIHlvdXIgYnVzaW5lc3MgbmVlZHMsIGNvbnNpZGVyIHVzaW5nIGEgZGVkaWNhdGVkIG1haWwgc2VydmljZSBsaWtlIE1haWxndW4uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTWFpbnRlbmFuY2UgZmVhdHVyZSByZXF1aXJlcyBhY2Nlc3MgdG8gU1NIIHByb3Blcmx5IGNvbmZpZ3VyZWQgaW4gQlRDUGF5U2VydmVyIGNvbmZpZ3VyYXRpb24iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImVycm9yLW1haW50ZW5hbmNlLWZlYXR1cmUtcmVxdWlyZXMtYWNjZXNzLXRvLXNzaC1wcm9wZXJseS1jb25maWd1cmVkLWluLWJ0Y3BheXNlcnZlci1jb25maWd1cmF0aW9uIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjZXJyb3ItbWFpbnRlbmFuY2UtZmVhdHVyZS1yZXF1aXJlcy1hY2Nlc3MtdG8tc3NoLXByb3Blcmx5LWNvbmZpZ3VyZWQtaW4tYnRjcGF5c2VydmVyLWNvbmZpZ3VyYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEVycm9yOiBNYWludGVuYW5jZSBmZWF0dXJlIHJlcXVpcmVzIGFjY2VzcyB0byBTU0ggcHJvcGVybHkgY29uZmlndXJlZCBpbiBCVENQYXlTZXJ2ZXIgY29uZmlndXJhdGlvbiIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU29tZXRpbWVzIGFuIGlzc3VlIHdpdGggRG9ja2VyIGNhbiB0ZW1wb3JhcmlseSBjYXVzZSB5b3VyIEJUQ1BheSBTZXJ2ZXIncyBtYWludGVuYW5jZSBmZWF0dXJlcyB0byBiZSBtaXNjb25maWd1cmVkLiBUaGlzIGlzc3VlIGlzIHR5cGljYWxseSBmaXhlZCBieSByZXN0YXJ0aW5nIHlvdXIgQlRDUGF5IFNlcnZlci4gVW5mb3J0dW5hdGVseSB3aGVuIHRoaXMgZXJyb3IgYXBwZWFycyBpbiB0aGUgaW50ZXJmYWNlLCB0aGUgcmVzdGFydCBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC4gWW91IHdpbGwgbmVlZCB0byAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi9GQVEvRkFRLVNlcnZlclNldHRpbmdzLyNob3ctdG8tcmVzdGFydC1idGNwYXktc2VydmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigicmVzdGFydCB1c2luZyBzc2giKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB0byByZXNvbHZlIHRoZSBpc3N1ZS4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiZXJyb3IteW91ci1sb2NhbC1jaGFuZ2VzLXRvLXRoZS1mb2xsb3dpbmctZmlsZXMtd291bGQtYmUtb3ZlcndyaXR0ZW4tYnktbWVyZ2UiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNlcnJvci15b3VyLWxvY2FsLWNoYW5nZXMtdG8tdGhlLWZvbGxvd2luZy1maWxlcy13b3VsZC1iZS1vdmVyd3JpdHRlbi1ieS1tZXJnZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgRXJyb3I6IFlvdXIgbG9jYWwgY2hhbmdlcyB0byB0aGUgZm9sbG93aW5nIGZpbGVzIHdvdWxkIGJlIG92ZXJ3cml0dGVuIGJ5IG1lcmdlIgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTb21ldGltZXMsIGFuIGFjY2lkZW50YWxseSBlZGl0ZWQgZmlsZSBjYW4gYnJlYWsgdGhlIHVwZGF0ZSBtZWNoYW5pc20gd2l0aCB0aGUgZm9sbG93aW5nIGVycm9yOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1iYXNoIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWJhc2giIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigiZXJyb3I6IFlvdXIgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJsb2NhbCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBjaGFuZ2VzIHRvIHRoZSBmb2xsb3dpbmcgZmlsZXMgd291bGQgYmUgb3ZlcndyaXR0ZW4gYnkgbWVyZ2U6XG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVG8gZml4IHRoZSB0aGlzLCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tc3NoLWludG8tbXktYnRjcGF5LXJ1bm5pbmctb24tdnBzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCJzc2ggaW50byB5b3VyIHNlcnZlciIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYW5kIHJ1biB0aGUgZm9sbG93aW5nIGNvbW1hbmRzOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1iYXNoIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWJhc2giIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3VkbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzdSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAtXG4iKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGJ1aWx0aW4gY2xhc3MtbmFtZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImNkIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIGJ0Y3BheXNlcnZlci1kb2NrZXJcbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImdpdCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiByZXNldCAtLWhhcmQgb3JpZ2luL21hc3RlclxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImVycm9yLWJ0Y3BheS1zc2hrZXlmaWxlLWlzLW5vdC1zZXQtd2hlbi1ydW5uaW5nLXRoZS1kb2NrZXItaW5zdGFsbC1vci11bmFibGUtdG8tdXBkYXRlLXRocm91Z2gtc2VydmVyLXNldHRpbmdzLW1haW50ZW5hbmNlIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjZXJyb3ItYnRjcGF5LXNzaGtleWZpbGUtaXMtbm90LXNldC13aGVuLXJ1bm5pbmctdGhlLWRvY2tlci1pbnN0YWxsLW9yLXVuYWJsZS10by11cGRhdGUtdGhyb3VnaC1zZXJ2ZXItc2V0dGluZ3MtbWFpbnRlbmFuY2UiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEVycm9yOiBCVENQQVlfU1NIS0VZRklMRSBpcyBub3Qgc2V0IHdoZW4gcnVubmluZyB0aGUgZG9ja2VyIGluc3RhbGwsIG9yIHVuYWJsZSB0byB1cGRhdGUgdGhyb3VnaCBTZXJ2ZXIgU2V0dGluZ3MgLyBNYWludGVuYW5jZSIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IG1heSBzZWUgc3VjaCB0aGUgZm9sbG93aW5nIG1lc3NhZ2Ugd2hlbiB5b3UgcnVuIHlvdXIgZG9ja2VyLWNvbXBvc2UgKGVpdGhlciB2aWEgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJidGNwYXktdXAuc2giKV0pLAogICAgICAgIF92bS5fdigiIG9yICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYnRjcGF5LXNldHVwLnNoIildKSwKICAgICAgICBfdm0uX3YoIik6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJXQVJOSU5HOiBUaGUgQlRDUEFZX1NTSEtFWUZJTEUgdmFyaWFibGUgaXMgbm90IHNldC4gRGVmYXVsdGluZyB0byBhIGJsYW5rIHN0cmluZy5cbldBUk5JTkc6IFRoZSBCVENQQVlfU1NIVFJVU1RFREZJTkdFUlBSSU5UUyB2YXJpYWJsZSBpcyBub3Qgc2V0LiBEZWZhdWx0aW5nIHRvIGEgYmxhbmsgc3RyaW5nLlxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJUQ1BheSBTZXJ2ZXIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcmVxdWlyZXMgU1NIIGFjY2VzcywgdG8gYWxsb3cgeW91IHRvIHBlcmZvcm0gdGhlIGZvbGxvd2luZyB0YXNrcyBmcm9tIHRoZSBmcm9udC1lbmQ6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVXBkYXRpbmcgdGhlIHNlcnZlciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2hhbmdpbmcgdGhlIGRvbWFpbiBuYW1lIG9mIHRoZSBzZXJ2ZXIiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBjYW4gcnVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZCBsaW5lIHRvIGdpdmUgYWNjZXNzIHRvIEJUQ1BheSB0byB5b3VyIHNlcnZlciB2aWEgU1NILiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1iYXNoIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWJhc2giIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3VkbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJzdSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAtXG4iKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGJ1aWx0aW4gY2xhc3MtbmFtZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImNkIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHZhcmlhYmxlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiRCVENQQVlfQkFTRV9ESVJFQ1RPUlkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIvYnRjcGF5c2VydmVyLWRvY2tlclxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZ2l0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIGNoZWNrb3V0IG1hc3RlclxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIjIFNldHVwIFNTSCBhY2Nlc3MgdmlhIHByaXZhdGUga2V5IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5zc2gta2V5Z2VuIC10IHJzYSAtZiAvcm9vdC8uc3NoL2lkX3JzYV9idGNwYXkgLXEgLVAgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gc3RyaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoJyIiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIC1tIFBFTVxuIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJlY2hvIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHN0cmluZyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCciIyBLZXkgdXNlZCBieSBCVENQYXkgU2VydmVyIicpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI+PiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAvcm9vdC8uc3NoL2F1dGhvcml6ZWRfa2V5c1xuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiY2F0IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIC9yb290Ly5zc2gvaWRfcnNhX2J0Y3BheS5wdWIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPj4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgL3Jvb3QvLnNzaC9hdXRob3JpemVkX2tleXNcbiIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gYXNzaWduLWxlZnQgdmFyaWFibGUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCVENQQVlfSE9TVF9TU0hLRVlGSUxFIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIi9yb290Ly5zc2gvaWRfcnNhX2J0Y3BheVxuIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIuIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIC4vYnRjcGF5LXNldHVwLnNoIC1pXG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRoZW1lLWN1c3RvbWl6YXRpb24tMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGhlbWUtY3VzdG9taXphdGlvbi0yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGhlbWUgLyBDdXN0b21pemF0aW9uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLWN1c3RvbWl6ZS1teS1idGNwYXktdGhlbWUtc3R5bGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10by1jdXN0b21pemUtbXktYnRjcGF5LXRoZW1lLXN0eWxlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIGN1c3RvbWl6ZSBteSBCVENQYXkgdGhlbWUgc3R5bGU/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlcmUgYXJlIHR3byB3YXlzIHRvIGN1c3RvbWl6ZSB0aGUgdGhlbWUgb2YgeW91ciBCVENQYXkuXG5UaGUgZWFzeSB3YXkgaXMgdG8gY2hvb3NlIG9yIHByb3ZpZGUgY3VzdG9tIHRoZW1lIHByZWZlcmVuY2VzIGluIHlvdXIgQlRDUGF5IGFzIGV4cGxhaW5lZCBpbiB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9UaGVtZS8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIlRoZW1lIGRvY3VtZW50YXRpb24iKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBhZHZhbmNlZCB0aGVtZSBjaGFuZ2VzLCB5b3UnbGwgbW9zdCBsaWtlbHkgbmVlZCB0byBmb3JrICBCVENQYXkgcmVwb3NpdG9yeSBhbmQgYXBwbHkgZGVzaXJlZCBkZXNpZ24gY2hhbmdlcy4gQnVpbGQgYW5kIHB1Ymxpc2ggdGhlIGRvY2tlciBpbWFnZSB0byBEb2NrZXIgSHViLiBTZXQgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQlRDUEFZX0lNQUdFIildKSwKICAgICAgICBfdm0uX3YoIiBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byB5b3VyIGRvY2tlciBpbWFnZSB0YWcoIiksCiAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICBfdm0uX3YoJ2V4cG9ydCBCVENQQVlfSU1BR0U9InlvdXIgY3VzdG9tIGJ0Y3BheSBkb2NrZXIgaW1hZ2UiJykKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIikgYW5kIHJ1biB0aGUgc2V0dXAgKCIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLiAuL2J0Y3BheS1zZXR1cC5zaCAtaSIpXSksCiAgICAgICAgX3ZtLl92KCIpIGFzIHVzdWFsIGZyb20gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9idGNwYXlzZXJ2ZXIvYnRjcGF5c2VydmVyLWRvY2tlciIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQlRDUGF5IERvY2tlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gTW9kaWZ5IGdlbmVyYXRlZCBkb2NrZXIgY29tcG9zZSB0byB1c2UgeW91ciBjdXN0b20gZG9ja2VyIGltYWdlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgd2FybmluZyIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiV0FSTklORyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBIGZvcmtlZCBCVENQYXkgU2VydmVyIHdpbGwgbmVlZCB0byBjcmVhdGUgYSBuZXcgaW1hZ2UgbWFudWFsbHkgYW5kIGZvbGxvdyB0aGVzZSBzdGVwcyBmb3IgRUFDSCBCVENQYXkgdXBkYXRlIHNvIGl0IGlzIGFkdmlzZWQgdG8gc3RpY2sgd2l0aCB0aGUgZGVmYXVsdCBzZXR1cCBhbmQgdGhlbWUgb3B0aW9ucy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLW1vZGlmeS10aGUtY2hlY2tvdXQtcGFnZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG93LXRvLW1vZGlmeS10aGUtY2hlY2tvdXQtcGFnZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyB0byBtb2RpZnkgdGhlIGNoZWNrb3V0IHBhZ2U/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IGNhbiBlYXNpbHkgY2hhbmdlIHRoZSBhcHBlYXJhbmNlIG9mIHlvdXIgQlRDUGF5J3MgY2hlY2tvdXQgcGFnZSBieSBmb2xsb3dpbmcgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvVGhlbWUvI2NoZWNrb3V0LXBhZ2UtdGhlbWUiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImluc3RydWN0aW9ucyBoZXJlIikKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8tYWRkLWdvb2dsZS1hbmFseXRpY3MtY29kZS10by1idGNwYXkiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10by1hZGQtZ29vZ2xlLWFuYWx5dGljcy1jb2RlLXRvLWJ0Y3BheSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgSG93IHRvIGFkZCBHb29nbGUgQW5hbHl0aWNzIGNvZGUgdG8gQlRDUGF5PyIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB3aGF0IHlvdSB3YW50IGJ5IGluamVjdGluZyB5b3VyIEdBIGNvZGUgdG8gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ+L3d3d3Jvb3QvY2hlY2tvdXQvanMvY29yZS5qcy4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVGhpcyBtaWdodCBiZSB0aGUgZWFzaWVzdCB3YXkgYnV0IHlvdSBoYXZlIHRvIHJlZG8gaXQgZXZlcnkgdGltZSB5b3UgdXBkYXRlIEJUQ1BheSB0byB0aGUgbGF0ZXN0IHZlcnNpb24uIFRoZW4geW91IHdvbuKAmXQgaGF2ZSB0aGUgaGFzc2xlIG9mIGZvcmtpbmcgdGhlIGNvZGUsIGRlcGxveWluZyBpdCBtYW51YWxseS4gRXZlcnkgdGltZSB0aGVyZSBpcyBhbiB1cGRhdGUuIEp1c3QgZG8gdGhlIGRvY2tlciB1cGRhdGUgYW5kIGFkZCB0aGUgc2FtZSBsaW5lcyB0byB0aGUgLmpzIGZpbGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicG9saWNpZXMtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcG9saWNpZXMtMiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9saWNpZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImhvdy10by1hbGxvdy1yZWdpc3RyYXRpb24tb24tbXktYnRjcGF5LXNlcnZlciIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG93LXRvLWFsbG93LXJlZ2lzdHJhdGlvbi1vbi1teS1idGNwYXktc2VydmVyIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBIb3cgdG8gYWxsb3cgcmVnaXN0cmF0aW9uIG9uIG15IEJUQ1BheSBTZXJ2ZXI/IikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVG8gYWxsb3cgb3RoZXIgdXNlcnMgdG8gcmVnaXN0ZXIgYW5kIHVzZSB5b3VyIHNlcnZlciwgaW4gU2VydmVyIFNldHRpbmdzID4gUG9saWNpZXMgZW5hYmxlIHJlZ2lzdHJhdGlvbi4gSWYgeW91ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtU2VydmVyU2V0dGluZ3MvI2hvdy10by1jb25maWd1cmUtc210cC1zZXR0aW5ncy1pbi1idGNwYXkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJjb25maWd1cmVkIFNNVFAgcHJvcGVybHkiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIHlvdSBjYW4gcmVxdWVzdCB1c2VycyB0byBwcm92aWRlIGUtbWFpbCBjb25maXJtYXRpb24gdG8gcHJldmVudCBzcGFtIG9yIGJvdHMgZnJvbSByZWdpc3RlcmluZyBvbiB5b3VyIGluc3RhbmNlLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImhvdy10by1oaWRlLW15LWJ0Y3BheS1zZXJ2ZXItZnJvbS1zZWFyY2gtZW5naW5lcyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2hvdy10by1oaWRlLW15LWJ0Y3BheS1zZXJ2ZXItZnJvbS1zZWFyY2gtZW5naW5lcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBIb3cgdG8gaGlkZSBteSBCVENQYXkgU2VydmVyIGZyb20gU2VhcmNoIEVuZ2luZXM/IikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRGlzY291cmFnaW5nIHNlYXJjaCBlbmdpbmVzIGZyb20gaW5kZXhpbmcgeW91ciBzaXRlIGluIFNlcnZlciBTZXR0aW5ncyA+IFBvbGljaWVzLCBhZGRzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJub2luZGV4Ij4nKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8geW91ciBzZXJ2ZXIgaGVhZGVyLCB3aGljaCBpbmZvcm1zIHNlYXJjaCBlbmdpbmVzIG5vdCB0byBpbmRleCB5b3VyIHBhZ2VzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIHVwIHRvIHNlYXJjaCBlbmdpbmVzIHRvIGhvbm9yIHRoaXMgcmVxdWVzdCwgYW5kIG1heSB0YWtlIHRpbWUgZm9yIHlvdXIgcGFnZXMgdG8gZGlzYXBwZWFyIGNvbXBsZXRlbHkuIFVuZm9ydHVuYXRlbHksIHRoZSBleGFjdCB0aW1lIGlzIGJleW9uZCBvdXIgY29udHJvbCwgaXQgZGVwZW5kcyBvbiBjcmF3bCBib3RzIG9mIHRoZSBwYXJ0aWN1bGFyIHNlYXJjaCBlbmdpbmUgbGlrZSBHb29nbGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic2VydmljZXMtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc2VydmljZXMtMiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2VydmljZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImhvdy10by1yZW1vdGVseS1jb25uZWN0LXRvLW15LWJ0Y3BheS1mdWxsLW5vZGUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10by1yZW1vdGVseS1jb25uZWN0LXRvLW15LWJ0Y3BheS1mdWxsLW5vZGUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEhvdyB0byByZW1vdGVseSBjb25uZWN0IHRvIG15IEJUQ1BheSBmdWxsIG5vZGU/IikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91J3JlIHVzaW5nIGFuIGV4dGVybmFsIHdhbGxldCB3aGljaCBhbGxvd3MgQlRDLVAyUCBjb25uZWN0aW9uLCB5b3UgY2FuIGVhc2lseSBjb25uZWN0IGl0IHRvIHlvdXIgQlRDUGF5IGZ1bGwgbm9kZS4gQnkgZG9pbmcgdGhpcywgeW91IGF2b2lkIGxlYWtpbmcgaW5mb3JtYXRpb24gdG8gdGhpcmQtcGFydHkgc2VydmVycyBhbmQgYXJlIHNvbGVseSByZWx5aW5nIG9uIHlvdXIgb3duIGZ1bGwgbm9kZS5cblRvIGNvbm5lY3QgdG8gYSBjb21wYXRpYmxlIEJUQy1QMlAgd2FsbGV0LCBnbyB0byAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU2VydmVyIFNldHRpbmdzID4gU2VydmljZXMgPiBGdWxsIG5vZGUgUDJQIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFJldmVhbCB0aGUgUVIgY29kZSBhbmQgc2NhbiBpdCB3aXRoIGEgQlRDLVAyUCBjb21wYXRpYmxlIHdhbGxldCwgb3IgaW5wdXQgaXQgYnkgY29weS1wYXN0aW5nIGl0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9pbWcvQlRDLVAyUC5wbmciKSwgYWx0OiAiQlRDLVAyUCIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIklmIHlvdSBkbyBub3Qgc2VlIEZ1bGwgbm9kZSBQMlAgaW4geW91ciBTZXJ2aWNlcywgeW91IHByb2JhYmx5IGhhdmUgdG8gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1EZXBsb3ltZW50LyNob3ctZG8taS1hY3RpdmF0ZS10b3Itb24tbXktYnRjcGF5LXNlcnZlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImFjdGl2YXRlIFRvciBvbiB5b3VyIHNlcnZlciIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZmlsZXMtMiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZmlsZXMtMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEZpbGVzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRvLXVwbG9hZC1maWxlcy10by1idGNwYXkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10by11cGxvYWQtZmlsZXMtdG8tYnRjcGF5IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IHRvIHVwbG9hZCBmaWxlcyB0byBCVENQYXk/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gdXBsb2FkIGZpbGVzIHRvIHlvdXIgQlRDUGF5IFNlcnZlciBpbnN0YW5jZSwgZmlyc3QgdW5kZXIgU2VydmVyIFNldHRpbmdzID4gU2VydmljZXMsIGVuYWJsZSB0aGUgRXh0ZXJuYWwgU3RvcmFnZSBmZWF0dXJlIGFuZCBjaG9vc2Ugd2hpY2ggc3RvcmFnZSBzZXJ2aWNlIHByb3ZpZGVyIHlvdSB3b3VsZCBsaWtlIHRvIHVzZS4gTmV4dCwgZ28gdG8gU2VydmVyIFNldHRpbmdzID4gRmlsZXMgdG8gYnJvd3NlIGFuZCB1cGxvYWQgbG9jYWwgZmlsZXMuIERlcGVuZGluZyBvbiB0aGUgbGltaXRhdGlvbnMgb2YgeW91ciBzdG9yYWdlIHN5c3RlbSwgeW91IG1heSBoYXZlIGRpZmZpY3VsdHkgdXBsb2FkaW5nIGxhcmdlIGZpbGVzLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}