{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/LedgerWallet.md?vue&type=template&id=4a87e545&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/LedgerWallet.md","mtime":1617331587405},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjb25uZWN0aW5nLWxlZGdlci13YWxsZXQtdG8tYnRjcGF5LXNlcnZlciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29ubmVjdGluZy1sZWRnZXItd2FsbGV0LXRvLWJ0Y3BheS1zZXJ2ZXIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb25uZWN0aW5nIExlZGdlciBXYWxsZXQgdG8gQlRDUGF5IFNlcnZlciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGRvY3VtZW50IHNob3dzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoImhvdyB0byBjb25uZWN0IExlZGdlciBOYW5vIFMgV2FsbGV0IHRvIEJUQ1BheSBTZXJ2ZXIiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgd2FybmluZyIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiV0FSTklORyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAicCIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiRGlyZWN0IExlZGdlciBOYW5vIFMgaW50ZWdyYXRpb24gaXMgIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJubyBsb25nZXIgc3VwcG9ydGVkIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIuIEZvciBCaXRjb2luIHdhbGxldHMsIHlvdSBjYW4gdXNlIHlvdXIgTGVkZ2VyIGhhcmR3YXJlIHdhbGxldCByZWd1bGFybHkgdmlhIHRoZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9IYXJkd2FyZVdhbGxldEludGVncmF0aW9uLyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJuZXcgaGFyZHdhcmUgd2FsbGV0IGludGVncmF0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAicCIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiRm9yICIpLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvQWx0Y29pbnMvIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImFsdGNvaW4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgd2FsbGV0cywgeW91IGNhbiBzcGVuZCBmdW5kcyBmcm9tIHlvdXIgZXh0ZXJuYWwgd2FsbGV0LCBzaWduIGEgdHJhbnNhY3Rpb24gd2l0aGluIHRoZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9XYWxsZXQvIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImludGVybmFsIHdhbGxldCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiB3aXRoICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvV2FsbGV0LyNzaWduaW5nLXdpdGgtaGQtcHJpdmF0ZS1rZXktb3ItbW5lbW9uaWMtc2VlZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkhEIFByaXZhdGUgS2V5IG9yIG1uZW1vbmljIHNlZWQiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgb3IgYSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvV2FsbGV0LyNzaWduaW5nLXdpdGgtYS1ob3Qtd2FsbGV0IiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiaG90IHdhbGxldCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRvIHNldCB1cCBhIG5ldyBhbHRjb2luIHdhbGxldCwgYWRkIHRoZSBleHRlbmRlZCBwdWJsaWMga2V5IG1hbnVhbGx5IG9yICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0NyZWF0ZVdhbGxldC8iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiY3JlYXRlIGEgbmV3IHdhbGxldCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImxlZGdlci1uYW5vLXMtd2FsbGV0LXNldHVwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsZWRnZXItbmFuby1zLXdhbGxldC1zZXR1cCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIExlZGdlciBOYW5vIFMgV2FsbGV0IFNldHVwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBndWlkZSBhc3N1bWVzLCB5b3UgaGF2ZSBhIE5hbm8gUyB3YWxsZXQgc2V0IHVwLiBUbyBjb25maWd1cmUgdGhlIE5hbm8gUywgcGxlYXNlIHNlZSB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LmxlZGdlci5jb20vc3RhcnQvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigicXVpY2sgc2V0dXAgZ3VpZGUgb24gbWFudWZhY3R1cmVyJ3Mgd2Vic2l0ZSIpLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJyZXF1aXJlbWVudHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlcXVpcmVtZW50cyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVxdWlyZW1lbnRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQml0Y29pbiBBcHAgaW5zdGFsbGVkIG9uIHRoZSBMZWRnZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkdvb2dsZSBDaHJvbWUgb3IgRmlyZWZveCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGb3IgRmlyZWZveCwgVTJGIG5lZWRzIHRvIGJlIGVuYWJsZWQgaW4gYWJvdXQ6Y29uZmlnIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJObyBvdGhlciBVMkYgZGV2aWNlcyBwbHVnZ2VkIGluIGludG8geW91ciBQQyAoWXViaWtleSwgb3RoZXIgd2FsbGV0cywgZXRjKSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJxdWljay1zZXR1cCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcXVpY2stc2V0dXAiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFF1aWNrIFNldHVwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUGx1ZyBpbiBMZWRnZXIgTmFubyBTIGludG8geW91ciBQQy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk9wZW4gdGhlIEJpdGNvaW4gYXBwIG9uIHlvdXIgTGVkZ2VyLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW4gQlRDUGF5IFNlcnZlciwgU3RvcmUgPiBTZXR0aW5ncyA+IFdhbGxldCA+IFNldHVwID4gRGVyaXZhdGlvbiBTY2hlbWUgPiBJbXBvcnQgZnJvbSBIYXJkd2FyZSBEZXZpY2UgPiBMZWRnZXIgd2FsbGV0IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlbGVjdCB0aGUgYWNjb3VudCB3aGljaCB5b3Ugd2FudCB0byB1c2UsIGluIG1vc3QgY2FzZXMgaXQncyB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQWNjb3VudCAwIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ29uZmlybSB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkV4cG9ydCBwdWJsaWMga2V5IildKSwKICAgICAgICAgIF92bS5fdigiIG9uIHRoZSB3YWxsZXQuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgZXh0ZW5kZWQgcHVibGljIGtleSB3aWxsIG5vdyBhdXRvbWF0aWNhbGx5IGJlIGFkZGVkIGZyb20gTGVkZ2VyIHRvIHlvdXIgQlRDUGF5IFNlcnZlciBTdG9yZS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJNYWtlIHN1cmUgdGhhdCB0aGUgZGVyaXZhdGlvbiBzY2hlbWUgaXMgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkVuYWJsZWQiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2xpY2sgIiksIF9jKCJjb2RlIiwgW192bS5fdigiQ29udGludWUiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDb25maXJtIildKSwKICAgICAgICAgIF92bS5fdigiIHRoZSBhZGRyZXNzIG1hdGNoIGluIEJUQ1BheS4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdXIgTGVkZ2VyIHdhbGxldCBpcyBub3cgY29ubmVjdGVkIHRvIHlvdXIgQlRDUGF5LiBQYXltZW50cyBnbyBkaXJlY3RseSB0byBMZWRnZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAibWFudWFsLXNldHVwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNtYW51YWwtc2V0dXAiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1hbnVhbCBTZXR1cCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSBoYXZlIG1vcmUgdGhhbiAyMCBhY2NvdW50cyBpbiB5b3VyIExlZGdlciB5b3UgbWlnaHQgbm90IGJlIGFibGUgdG8gZmluZCB0aGUgY29ycmVjdCBhY2NvdW50IGJlY2F1c2UgdGhlIHNlbGVjdCBzaG93cyBhIG1heGltdW0gb2YgMjAgZW50cmllcy5cbkluIHRoaXMgY2FzZSB5b3UgY2FuIG1hbnVhbGx5IGZpbmQgdGhlIGV4dGVuZGVkIHB1YmxpYyBrZXkgZm9yIHlvdXIgd2FudGVkIGFjY291bnQgaW4gdGhlc2Ugc3RlcHM6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJPcGVuIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc2hvcC5sZWRnZXIuY29tL3BhZ2VzL2xlZGdlci1saXZlIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiTGVkZ2VyIGxpdmUgYXBwIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBY2NvdW50cyAtPiBjaG9vc2UgeW91ciBhY2NvdW50IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFZGl0IEFjY291bnQgb24gdGhlIHRvcCByaWdodCB2aWEgdGhlIHRvb2wtaWNvbiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW4gRWRpdCBBY2NvdW50IC0+IEFEVkFOQ0VEIExPR1MiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNvcHkgdGhlIGV4dGVuZGVkIHB1YmxpYyBrZXkgc3RyaW5nIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoJ1Bhc3RlIGl0IG1hbnVhbGx5IGludG8gdGhlICJEZXJpdmF0aW9uU2NoZW1lIiB0ZXh0ZmllbGQnKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ29udGludWUgd2l0aCAiKSwKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3F1aWNrLXNldHVwIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJTdGVwIDcgb2YgdGhlIFF1aWNrIFNldHVwIGFib3ZlIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0xlZGdlckhlbHBYcHViLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICdMZWRnZXIgQWNjb3VudCAiQWR2YW5jZWQgTG9ncyIgaW5mbyBzY3JlZW5zaG90JywKICAgICAgICAgICAgdGl0bGU6ICJMZWRnZXIgQWNjb3VudCBBZHZhbmNlZCBMb2dzIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAic3BlbmRpbmctZnJvbS1idGNwYXktc2VydmVyLXdhbGxldC13aXRoLWxlZGdlciIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3BlbmRpbmctZnJvbS1idGNwYXktc2VydmVyLXdhbGxldC13aXRoLWxlZGdlciIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgU3BlbmRpbmcgZnJvbSBCVENQYXkgU2VydmVyIHdhbGxldCB3aXRoIExlZGdlciIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uY2UgdGhlcmUgYXJlIHNvbWUgZnVuZHMgaW4gcmVjZWl2ZWQgdG8geW91ciBCVENQYXkgV2FsbGV0IGNvbm5lY3RlZCB0byBMZWRnZXIsIHlvdSBjYW4gc3BlbmQgdGhlbSBieSBzaWduaW5nIGEgdHJhbnNhY3Rpb24gd2l0aCB5b3VyIGhhcmR3YXJlIHdhbGxldC4gVGhpcyBhbGxvd3MgZWFzeSBpbnRlcmFjdGlvbiBvZiB0aGUgTGVkZ2VyIHdhbGxldCB3aXRoIHlvdXIgZnVsbCBub2RlLCB3aXRob3V0IGxlYWtpbmcgaW5mb3JtYXRpb24gdG8gdGhpcmQtcGFydHkgc2VydmVycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJQbHVnIGluIExlZGdlciBOYW5vIFMgaW50byB5b3VyIFBDLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiT3BlbiB0aGUgQml0Y29pbiBhcHAgb24geW91ciBMZWRnZXIuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJJbiBCVENQYXksIGdvIHRvIFdhbGxldHMgPiBNYW5hZ2UgPiBTZW5kIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJGaWxsIGluIGRlc3RpbmF0aW9uIGFkZHJlc3MgYW5kIHRoZSBhbW91bnQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2xpY2sgb24gdGhlIFNpZ24gd2l0aCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigieW91ciBMZWRnZXIgV2FsbGV0IGRldmljZSIpXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkJUQ1BheSB3aWxsIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gd2l0aCB0aGUgTGVkZ2VyIHdhbGxldCBhbmQgZGlzcGxheSB0cmFuc2FjdGlvbiBpbmZvcm1hdGlvbiBvbiB0aGUgd2FsbGV0IHNjcmVlbi4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ29uZmlybSB0aGUgdHJhbnNhY3Rpb24gb24gdGhlIExlZGdlci4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW4gTGVkZ2VyLCBjbGljayBvbiB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlYWR5IFRvIFNpZ24iKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZXZpZXcgeW91ciB0cmFuc2FjdGlvbnMgYW5kIGNsaWNrICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJCcm9hZGNhc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdG8gYnJvYWRjYXN0IGl0IG9uIHRoZSBuZXR3b3JrLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHZpZGVvIGJlbG93IHNob3dzIGhvdyB0byBjb25uZWN0IHlvdXIgQlRDUGF5IHN0b3JlIHRvIHlvdXIgTGVkZ2VyIGFuZCBob3cgdG8gdXNlIExlZGdlciB3aXRoIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL1dhbGxldC8iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImludGVybmFsIEJUQ1BheSB3YWxsZXQiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAieXRFbWJlZCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgInVybChodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS8xU2o1bVA0VGtGSS9ocWRlZmF1bHQuanBnKSIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0xU2o1bVA0VGtGSSIsCiAgICAgICAgICAgICJkYXRhLWlkIjogIjFTajVtUDRUa0ZJIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUiLAogICAgICAgICAgICAgICJkYXRhLXNyYyI6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvMVNqNW1QNFRrRkk/JmF1dG9wbGF5PTEmYXV0b2hpZGU9MSZtb2Rlc3RicmFuZGluZz0xJmNvbG9yPXdoaXRlJnJlbD0wIiwKICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgICAgIGFsbG93OiAiYXV0b3BsYXk7ZW5jcnlwdGVkLW1lZGlhO3BpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}