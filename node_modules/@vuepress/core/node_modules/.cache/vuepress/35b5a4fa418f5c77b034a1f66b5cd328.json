{"remainingRequest":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js!/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Configurator/README.md?vue&type=template&id=16614c3b&","dependencies":[{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/Configurator/README.md","mtime":1617331797116},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Users/siyuanhe/code/codeminer/docs.opendigitalpay.io/docs/.vuepress/preprocessMarkdown.js","mtime":1617331587385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJkZXBsb3ktYnRjcGF5LXdpdGgtY29uZmlndXJhdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNkZXBsb3ktYnRjcGF5LXdpdGgtY29uZmlndXJhdG9yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGVwbG95IEJUQ1BheSB3aXRoIENvbmZpZ3VyYXRvciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJUQ1BheSBTZXJ2ZXIgY2FuIGVhc2lseSBiZSBjb25maWd1cmVkIGFuZCBkZXBsb3llZCB0byBhIHNlcnZlciB1c2luZyBDb25maWd1cmF0b3IuIFRoaXMgdG9vbCBtYWtlcyBkZXBsb3ltZW50IHNpbXBsZSBieSBhbGxvd2luZyB1c2VycyB0byBpbml0aWFsaXplIG9yIG1vZGlmeSB0aGVpciBCVENQYXkgc2V0dXAgZnJvbSB0aGUgQ29uZmlndXJhdG9yLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNvbmZpZ3VyYXRvciBjYW4gYmUgdXNlZCB0byBtb2RpZnkgYW4gZXhpc3RpbmcgQlRDUGF5IFNlcnZlciwgZnJvbSB0aGUgYWRtaW4gYWNjb3VudCBvbmx5LiBPdGhlciB1c2VycyBtYXkgdmlzaXQgdGhlIHNlcnZlcidzIENvbmZpZ3VyYXRvciB1cmwgdG8gZGVwbG95IG5ldyBCVENQYXkgaW5zdGFuY2VzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNvbWVvbmUgc3VjaCBhcyBhIEJUQ1BheSB0aGlyZC1wYXJ0eSBob3N0IG1heSBwcm92aWRlIGEgQ29uZmlndXJhdG9yIGluc3RhbmNlIGZvciB0aGVpciB1c2Vycy4gVGhpcyBjYW4gaGVscCB0cmFuc2l0aW9uIHVzZXJzIHRvIGEgc2VsZi1ob3N0ZWQgc29sdXRpb24gd2hlbiB0aGV5IGFyZSByZWFkeSB0byBzdG9wIHVzaW5nIHRoZSB0aGlyZC1wYXJ0eSBob3N0J3Mgc2VydmVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFub3RoZXIgdXNlLWNhc2UgaXMgZm9yIHNlcnZlciBhZG1pbnMgd2hvIGFyZSBkZXBsb3lpbmcgQlRDUGF5IFNlcnZlcidzIG9uIGJlaGFsZiBvZiBjbGllbnRzIG9yIG90aGVyIHVzZXJzIGFzIHBhcnQgb2YgYSBjb25zdWx0aW5nIGJ1c2luZXNzLiBBZG1pbnMgY2FuIGVhc2lseSBleHBvcnQgYSBEb2NrZXIgZGVwbG95bWVudCBzY3JpcHQgZnJvbSBDb25maWd1cmF0b3Igc2VsZWN0aW9ucyBvciBkZXBsb3kgdGhlIGNvbmZpZ3VyYXRpb24gaW1tZWRpYXRlbHkgdG8gYSBWUFMgb3Igb24tcHJlbWlzZSBzZXJ2ZXIgdXNpbmcgU1NILiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogImhvdy10by1zZXQtdXAtY29uZmlndXJhdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tc2V0LXVwLWNvbmZpZ3VyYXRvciIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyB0byBzZXQgdXAgQ29uZmlndXJhdG9yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJvcHRpb24tMS1hZGQtYXMtYW4tZXh0ZXJuYWwtc2VydmljZS10by1idGNwYXkiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI29wdGlvbi0xLWFkZC1hcy1hbi1leHRlcm5hbC1zZXJ2aWNlLXRvLWJ0Y3BheSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgT3B0aW9uIDE6IEFkZCBhcyBhbiBleHRlcm5hbCBzZXJ2aWNlIHRvIEJUQ1BheSIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiSWYgeW91IGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBCVENQYXkgU2VydmVyICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0RlcGxveW1lbnQvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJkZXBsb3llZCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIHdpdGggdGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcHQtYWRkLWNvbmZpZ3VyYXRvciIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLURlcGxveW1lbnQjaG93LWNhbi1pLW1vZGlmeS1vci1kZWFjdGl2YXRlLWVudmlyb25tZW50LXZhcmlhYmxlcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImVudmlyb25tZW50IHZhcmlhYmxlIGFkZGVkIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIsIHZpZXcgeW91ciBDb25maWd1cmF0b3IgYnkgbmF2aWdhdGluZyB0bzoiKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlcnZlciBTZXR0aW5ncyA+IFNlcnZpY2VzID4gT3RoZXIgZXh0ZXJuYWwgc2VydmljZXMgPiBDb25maWd1cmF0b3IgPiBDbGljayBTZWUgaW5mb3JtYXRpb24iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk9uY2UgZW5hYmxlZCwgbm9uLWFkbWlucyBtYXkgYWxzbyB2aWV3IHRoZSBDb25maWd1cmF0b3IgYXQ6ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigieW91cmJ0Y3BheWRvbWFpbi5jb20vY29uZmlndXJhdG9yIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJvcHRpb24tMi1idWlsZC1sb2NhbGx5LXdpdGgtZG9ja2VyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNvcHRpb24tMi1idWlsZC1sb2NhbGx5LXdpdGgtZG9ja2VyIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3B0aW9uIDI6IEJ1aWxkIGxvY2FsbHkgd2l0aCBEb2NrZXIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgaGF2ZSBEb2NrZXIgaW5zdGFsbGVkIG9uIHlvdXIgbWFjaGluZSwgeW91IGNhbiBvcGVuIGEgdGVybWluYWwgYW5kIHRoZSBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kIHRvIHJ1biBDb25maWd1cmF0b3IgaW5zaWRlIG9mIGEgRG9ja2VyIGNvbnRhaW5lciB0byB1c2Ugb24geW91ciBsb2NhbCBtYWNoaW5lOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJkb2NrZXIgcnVuIC1wIDEzMzc6ODAgLS1uYW1lIGJ0Y3BheXNlcnZlci1jb25maWd1cmF0b3IgYnRjcGF5c2VydmVyL2J0Y3BheXNlcnZlci1jb25maWd1cmF0b3IiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5vdyB5b3UgY2FuIG9wZW4gYSBicm93c2VyIHRhYiBhbmQgdmlldyB5b3VyIENvbmZpZ3VyYXRvciBhdCAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigibG9jYWxob3N0OjEzMzciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogImhvdy10by11c2UtY29uZmlndXJhdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctdG8tdXNlLWNvbmZpZ3VyYXRvciIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyB0byB1c2UgQ29uZmlndXJhdG9yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlN0ZXAgMTogRGVzdGluYXRpb24iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNlbGVjdCBhbiBvcHRpb24gdG8gZGVwbG95IHVzaW5nIFNTSCBub3cgb3IgZ2VuZXJhdGUgYSBiYXNoIHNjcmlwdCBmb3IgbGF0ZXIgZGVwbG95bWVudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQ29uZmlndXJhdG9yU3RlcDEucG5nIiksCiAgICAgICAgICAgIGFsdDogIlNlbGVjdCBEZXBsb3ltZW50IgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGNvbmZpZ3VyZSBhbmQgZGVwbG95IGEgc2VydmVyIG5vdywgcHJvdmlkZSB5b3VyIFNTSCBjcmVkZW50aWFscyB3aGVyZSB5b3Ugd291bGQgbGlrZSBpdCBkZXBsb3llZCB0by4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQ29uZmlndXJhdG9yU3RlcDFzc2gucG5nIiksCiAgICAgICAgICAgIGFsdDogIlByb3ZpZGUgU1NIIERldGFpbHMiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnTm90ZTogVGhlICJMb2FkIEV4aXN0aW5nIFNldHRpbmdzIiBvcHRpb24gd2lsbCB1c2UgdGhlIHByZXZpb3VzIGRlcGxveW1lbnRcJ3Mgc2VsZWN0aW9ucyBmb3IgZmFzdGVyIGNvbmZpZ3VyYXRpb24gaWYgeW91IGFyZSBtb2RpZnlpbmcgYW4gZXhpc3RpbmcgaW5zdGFsbGF0aW9uLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJTdGVwIDI6IERvbWFpbiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUHJvdmlkZSB0aGUgZG9tYWluIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHlvdXIgc2VydmVyIElQIGFkZHJlc3MuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0NvbmZpZ3VyYXRvclN0ZXAyLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJQcm92aWRlIERvbWFpbiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU3RlcCAzOiBDaGFpbiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2VsZWN0IHRoZSBkZXNpcmVkIEJpdGNvaW4gbmV0d29yayB0eXBlLCBCaXRjb2luIG5vZGUgcHJ1bmluZyBsZXZlbCBhbmQgYWRkIGFueSBhbHRjb2lucy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQ29uZmlndXJhdG9yU3RlcDMucG5nIiksCiAgICAgICAgICAgIGFsdDogIlNlbGVjdCBDaGFpbiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU3RlcCA0OiBMaWdodG5pbmciKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTZWxlY3QgdGhlIGRlc2lyZWQgTGlnaHRuaW5nIG5ldHdvcmsgb3B0aW9uIChvcHRpb25hbCkuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0NvbmZpZ3VyYXRvclN0ZXA0LnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJMaWdodG5pbmcgT3B0aW9ucyIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU3RlcCA1OiBBZGRpdGlvbmFsIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBZGQgYW55IGFkZGl0aW9uYWwgc2VydmljZXMgdG8geW91ciBCVENQYXkgU2VydmVyIGRlcGxveW1lbnQgKG9wdGlvbmFsKS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvQ29uZmlndXJhdG9yU3RlcDUucG5nIiksCiAgICAgICAgICAgIGFsdDogIkRvY2tlciBPcHRpb25zIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJTdGVwIDY6IEFkdmFuY2VkIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUHJvdmlkZSBhbnkgYWRkaXRpb25hbCBhZHZhbmNlZCBzZXR0aW5ncyAob3B0aW9uYWwpLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0NvbmZpZ3VyYXRvclN0ZXA2LnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJBZHZhbmNlZCBTZXR0aW5ncyIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU3RlcCA3OiBTdW1tYXJ5IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJWZXJpZnkgeW91ciBjb25maWd1cmF0aW9uIHNldHRpbmdzIGxvb2sgY29ycmVjdCBiZWZvcmUgZGVwbG95aW5nIHRoZSBzZXJ2ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0NvbmZpZ3VyYXRvclN0ZXA3LnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJSZXZpZXcgU2V0dGluZ3MiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkR1cmluZyBEZXBsb3ltZW50OiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ29uZmlndXJhdG9yIHdpbGwgU1NIIGludG8gdGhlIHRhcmdldCBzZXJ2ZXIgYW5kIGRvIHRoZSBmb2xsb3dpbmcgYWN0aW9ucyBjb21wbGV0ZWx5IGF1dG9tYXRlZCBvbiB5b3VyIGJlaGFsZjoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJJbnN0YWxsIERvY2tlciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW5zdGFsbCBEb2NrZXItQ29tcG9zZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW5zdGFsbCBHaXQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNldHVwIEJUQ1BheSBzZXR0aW5ncyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJNYWtlIHN1cmUgaXQgc3RhcnRzIGF0IHJlYm9vdCB2aWEgdXBzdGFydCBvciBzeXN0ZW1kIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBZGQgQlRDUGF5IHV0aWxpdGllcyBpbiAvdXNlci9iaW4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlN0YXJ0IEJUQ1BheSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGRlcGxveW1lbnQgcHJvZ3Jlc3Mgd2lsbCBiZSBkaXNwbGF5ZWQgaW4geW91ciBDb25maWd1cmF0b3IuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0NvbmZpZ3VyYXRvckRlcGxveTEucG5nIiksCiAgICAgICAgICAgIGFsdDogIldhaXQgZm9yIERlcGxveW1lbnQiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVXBvbiBkZXBsb3ltZW50IGNvbXBsZXRpb24sIENvbmZpZ3VyYXRvciB3aWxsIGRpc3BsYXkgdGhlIGRvbWFpbiBvZiB0aGUgbmV3bHkgY29uZmlndXJlZCBCVENQYXkgU2VydmVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9Db25maWd1cmF0b3JEZXBsb3kyLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJEZXBsb3ltZW50IExvY2F0aW9uIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBsaXN0IG9mIGV4ZWN1dGVkIGNvbW1hbmRzIHRoYXQgd2VyZSB1c2VkIHRvIGRlcGxveSB0aGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gYXJlIGFsc28gZGlzcGxheWVkLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy9Db25maWd1cmF0b3JEZXBsb3kzLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJFeGVjdXRlZCBDb21tYW5kcyIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJleHBvcnQtbWFudWFsLWNvbmZpZ3VyYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2V4cG9ydC1tYW51YWwtY29uZmlndXJhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEV4cG9ydCBNYW51YWwgQ29uZmlndXJhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSB3YW50IHRvIGRlcGxveSB0aGUgY29uZmlndXJhdGlvbiB0byB5b3VyIHNlcnZlciBhdCBhIGxhdGVyIHRpbWUsIHlvdSBjYW4gaW5zdGVhZCBleHBvcnQgYSBiYXNoIHNjcmlwdCBvZiB5b3VyIHNldHRpbmdzLiBMYXRlciB5b3UgY2FuIHBhc3RlIHRoZSBjb25maWd1cmF0aW9uIGludG8geW91ciBzZXJ2ZXIgdGVybWluYWwuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL0NvbmZpZ3VyYXRvckRlcGxveU1hbnVhbC5wbmciKSwKICAgICAgICAgICAgYWx0OiAiTWFudWFsIFNjcmlwdCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwcml2YWN5LXNlY3VyaXR5LWNvbmNlcm5zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcml2YWN5LXNlY3VyaXR5LWNvbmNlcm5zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJpdmFjeSAmIFNlY3VyaXR5IENvbmNlcm5zIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgeW91IGFyZSB1c2luZyBzb21lb25lIGVsc2UncyBDb25maWd1cmF0b3IgdG8gZGVwbG95IHlvdXIgQlRDUGF5IFNlcnZlciwgc3VjaCBhcyBhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvVGhpcmRQYXJ0eUhvc3RpbmcvIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJ0cnVzdGVkIFRoaXJkLVBhcnR5IikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIsIHlvdSB3aWxsIGJlIHByb3ZpZGluZyB0aGVtIHdpdGggeW91cjoiKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInNlcnZlciBJUC9kb21haW4gYW5kIHNzaCBwYXNzd29yZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigic2VydmVyIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVzZXJzIGFyZSBhZHZpc2VkIHRvIGNoYW5nZSB0aGVpciBTU0ggcGFzc3dvcmQgYWZ0ZXIgQ29uZmlndXJhdG9yIGRlcGxveW1lbnQgaXMgY29tcGxldGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gbWl0aWdhdGUgdGhlc2UgcHJpdmFjeSBhbmQgc2VjdXJpdHkgY29uY2VybnMsIHVzZSBlaXRoZXIgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI29wdGlvbi0yLWJ1aWxkLWxvY2FsbHktd2l0aC1Eb2NrZXIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJsb2NhbCBkZXBsb3ltZW50IHdpdGggRG9ja2VyIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBvciB0aGUgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZXhwb3J0LW1hbnVhbC1jb25maWd1cmF0aW9uIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiZXhwb3J0ZWQgbWFudWFsIHNjcmlwdCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3aXRob3V0IHByb3ZpZGluZyB5b3VyIGRvbWFpbi4gQmUgc3VyZSB0byBpbmNsdWRlIHRoZSBkb21haW4gd2hlbiB5b3UgcGFzdGUgdGhlIGNvbW1hbmRzIGludG8geW91ciB0ZXJtaW5hbC4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}